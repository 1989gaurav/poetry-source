// Generated by CoffeeScript 1.6.2
(function() {
  var LayoutHelper,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LayoutHelper = (function() {
    function LayoutHelper(widgetContents, style, viewportElement, widgetContainer, widgetSelector, isLoadedAsync, itemTemplate, onLayoutChange) {
      var _ref;

      this.widgetContents = widgetContents;
      this.style = style;
      this.viewportElement = viewportElement;
      this.widgetContainer = widgetContainer;
      this.widgetSelector = widgetSelector;
      this.isLoadedAsync = isLoadedAsync;
      this.itemTemplate = itemTemplate;
      this.onLayoutChange = onLayoutChange;
      this.doLayout = __bind(this.doLayout, this);
      this.layout = new Poe3.Layout($(this.viewportElement), (_ref = this.style) != null ? _ref : {});
    }

    LayoutHelper.prototype.doLayout = function() {
      var bump, comparer, fnAppend, fnOnAsyncWidgetLoad, fnOnSyncWidgetLoad, hasAsyncWidgets, i, laidOutItems, sequence, showSyncWidgets, syncWidgetInserts, syncWidgetSequence, syncWidgets, widgetContent, x, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2,
        _this = this;

      sequence = [];
      for (i = _i = 0, _ref = this.widgetContents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        sequence.push({
          order: Math.random(),
          index: i
        });
      }
      comparer = function(a, b) {
        if (a.order < b.order) {
          return -1;
        } else if (a.order > b.order) {
          return 1;
        } else {
          return 0;
        }
      };
      sequence.sort(comparer);
      syncWidgetInserts = (function() {
        var _j, _len, _results;

        _results = [];
        for (i = _j = 0, _len = sequence.length; _j < _len; i = ++_j) {
          x = sequence[i];
          if (!this.isLoadedAsync(this.widgetContents[x.index])) {
            _results.push(i);
          }
        }
        return _results;
      }).call(this);
      syncWidgetSequence = [];
      _ref1 = this.widgetContents;
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        widgetContent = _ref1[_j];
        if (!this.isLoadedAsync(widgetContent)) {
          syncWidgetSequence.push({
            insertAt: syncWidgetInserts.shift(),
            widgetContent: widgetContent
          });
        } else {
          hasAsyncWidgets = true;
        }
      }
      fnAppend = function(html) {
        return $(_this.widgetContainer).append(html);
      };
      laidOutItems = 0;
      fnOnAsyncWidgetLoad = function(widgetContent) {
        _this.layout.layoutElement($(_this.widgetSelector(widgetContent)));
        if (typeof _this.onLayoutChange === "function") {
          _this.onLayoutChange();
        }
        laidOutItems++;
        return showSyncWidgets();
      };
      syncWidgets = [];
      fnOnSyncWidgetLoad = function(widgetContent) {
        var seq;

        seq = ((function() {
          var _k, _len1, _results;

          _results = [];
          for (_k = 0, _len1 = syncWidgetSequence.length; _k < _len1; _k++) {
            x = syncWidgetSequence[_k];
            if (x.widgetContent === widgetContent) {
              _results.push(x);
            }
          }
          return _results;
        })())[0];
        return syncWidgets.push({
          widget: $(_this.widgetSelector(widgetContent)),
          insertAt: seq.insertAt
        });
      };
      showSyncWidgets = function() {
        var item, matching, w;

        matching = (function() {
          var _k, _len1, _results;

          _results = [];
          for (_k = 0, _len1 = syncWidgets.length; _k < _len1; _k++) {
            w = syncWidgets[_k];
            if (w.insertAt <= laidOutItems) {
              _results.push(w);
            }
          }
          return _results;
        })();
        if (matching.length) {
          syncWidgets = (function() {
            var _k, _len1, _results;

            _results = [];
            for (_k = 0, _len1 = syncWidgets.length; _k < _len1; _k++) {
              w = syncWidgets[_k];
              if (w.insertAt > laidOutItems) {
                _results.push(w);
              }
            }
            return _results;
          })();
          item = matching[0];
          while ((item != null ? item.insertAt : void 0) <= laidOutItems) {
            matching.shift();
            _this.layout.layoutElement(item.widget);
            laidOutItems++;
            if (typeof _this.onLayoutChange === "function") {
              _this.onLayoutChange();
            }
            item = matching[0];
          }
          return showSyncWidgets();
        }
      };
      bump = function(showall) {
        if (showall == null) {
          showall = false;
        }
        if (showall) {
          laidOutItems = 100000;
        } else {
          laidOutItems++;
        }
        showSyncWidgets();
        if (syncWidgets.length) {
          return setTimeout(bump, hasAsyncWidgets ? 500 : 0);
        }
      };
      _ref2 = this.widgetContents;
      for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
        widgetContent = _ref2[_k];
        this.itemTemplate(widgetContent, fnAppend, fnOnAsyncWidgetLoad, fnOnSyncWidgetLoad);
      }
      setTimeout(bump, hasAsyncWidgets ? 500 : 0);
      return setTimeout((function() {
        return bump(true);
      }), 7000);
    };

    return LayoutHelper;

  })();

  window.Poe3.LayoutHelper = LayoutHelper;

}).call(this);
