// Generated by CoffeeScript 1.4.0
(function() {
  var TagListView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TagListView = (function(_super) {

    __extends(TagListView, _super);

    function TagListView(renderTo, posts) {
      this.renderTo = renderTo;
      this.posts = posts;
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);

      TagListView.__super__.constructor.call(this, {
        model: this.posts
      });
    }

    TagListView.prototype.initialize = function() {
      this.containerPrefix = "e_" + (Poe3.uniqueId());
      return $(this.renderTo).html(this.el);
    };

    TagListView.prototype.render = function() {
      var coverPosts, getCoverPost, isInCoverPosts, layoutHelper, post, posts, postsList, style, tag, tagDict, _i, _j, _len, _len1, _ref, _ref1, _ref2,
        _this = this;
      $(this.el).html(this.template({}));
      tagDict = {};
      _ref = this.posts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        post = _ref[_i];
        if ((_ref1 = post.get('tags')) != null ? _ref1.length : void 0) {
          _ref2 = post.get('tags');
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            tag = _ref2[_j];
            if (!tagDict[tag]) {
              tagDict[tag] = [];
            }
            tagDict[tag].push(post);
          }
        }
      }
      postsList = [];
      for (tag in tagDict) {
        posts = tagDict[tag];
        postsList.push({
          tag: tag,
          posts: posts,
          count: posts.length
        });
      }
      coverPosts = [];
      isInCoverPosts = function(p) {
        var _p;
        return ((function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = coverPosts.length; _k < _len2; _k++) {
            _p = coverPosts[_k];
            if (_p === p) {
              _results.push(_p);
            }
          }
          return _results;
        })()).length > 0;
      };
      getCoverPost = function(posts) {
        var cover, notCovered, p, _ref3;
        notCovered = (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = posts.length; _k < _len2; _k++) {
            p = posts[_k];
            if (!isInCoverPosts(p)) {
              _results.push(p);
            }
          }
          return _results;
        })();
        cover = notCovered.length ? (_ref3 = ((function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = notCovered.length; _k < _len2; _k++) {
            post = notCovered[_k];
            if (post.get('attachmentType') === 'image') {
              _results.push(post);
            }
          }
          return _results;
        })())[0]) != null ? _ref3 : notCovered[0] : posts[0];
        coverPosts.push(cover);
        return cover;
      };
      style = this.defaultLayoutStyle();
      style.marginLeft = 0;
      style.marginRight = 90;
      style.colWidth = 228;
      layoutHelper = new Poe3.LayoutHelper(postsList, style, ".tag-list-view .viewport", ".tag-list-view .items", function(item) {
        return "#" + _this.containerPrefix + "-posts-by-tag-" + item.tag;
      }, function(item) {
        return item.posts[0].isLoadedAsync();
      }, (function(item, fnAppend, fnOnAsyncWidgetLoad, fnOnSyncWidgetLoad) {
        return new Poe3.TagListViewItem(item, _this.containerPrefix, fnAppend, fnOnAsyncWidgetLoad, fnOnSyncWidgetLoad, getCoverPost);
      }), (function() {}));
      return layoutHelper.doLayout();
    };

    return TagListView;

  })(Poe3.BaseView);

  window.Poe3.TagListView = TagListView;

}).call(this);
