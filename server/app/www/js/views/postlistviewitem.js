// Generated by CoffeeScript 1.6.2
(function() {
  var PostListViewItem,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PostListViewItem = (function(_super) {
    __extends(PostListViewItem, _super);

    function PostListViewItem(model, containerPrefix, tagPrefix, fnAppend, fnOnAsyncWidgetLoad, fnOnSyncWidgetLoad) {
      this.model = model;
      this.containerPrefix = containerPrefix;
      this.tagPrefix = tagPrefix;
      this.fnAppend = fnAppend;
      this.fnOnAsyncWidgetLoad = fnOnAsyncWidgetLoad;
      this.fnOnSyncWidgetLoad = fnOnSyncWidgetLoad;
      this.render = __bind(this.render, this);
      PostListViewItem.__super__.constructor.call(this);
      this.render();
    }

    PostListViewItem.prototype.render = function() {
      var author, authors, html, k, params, part, v, _fn, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;

      authors = {};
      _ref = this.model.get('selectedParts');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        authors[part.createdBy.id] = part.createdBy;
      }
      this.model.set('cols', 1);
      params = {
        post: this.model.toTemplateParam(),
        containerPrefix: this.containerPrefix,
        tagPrefix: this.tagPrefix
      };
      params.authors = (function() {
        var _results;

        _results = [];
        for (k in authors) {
          v = authors[k];
          _results.push(v);
        }
        return _results;
      })();
      params.formattedParts = this.model.format('condensed');
      if (this.model.get('attachmentType') === 'image') {
        params.displayClass = 'with-image';
        params.attachmentIsImage = true;
      } else {
        params.displayClass = 'just-text';
      }
      html = this.template(params);
      this.fnAppend(html);
      $(document).bindNew('click', "#" + this.containerPrefix + "-postid-" + this.model.id, function() {
        var uid;

        uid = _this.model.get('uid');
        new Poe3.PostView(uid, {
          tagPrefix: _this.tagPrefix
        });
        app.navigate("/" + uid, {
          trigger: false
        });
        return false;
      });
      _ref1 = params.authors;
      _fn = function(author) {
        return $(document).bindNew('click', "#" + _this.containerPrefix + "-postid-" + _this.model.id + "-author-" + author.id, function() {
          app.navigate("/" + author.domain + "/" + author.username, {
            trigger: true
          });
          return false;
        });
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        author = _ref1[_j];
        _fn(author);
      }
      if (this.model.get('attachmentType') === 'image') {
        $("#" + this.containerPrefix + "-postid-" + this.model.id + " .background").imagesLoaded(function() {
          return _this.fnOnAsyncWidgetLoad(_this.model);
        });
      } else {
        this.fnOnSyncWidgetLoad(this.model);
      }
      return this.onRenderComplete("#" + this.containerPrefix + "-postid-" + this.model.id);
    };

    return PostListViewItem;

  })(Poe3.BaseView);

  window.Poe3.PostListViewItem = PostListViewItem;

}).call(this);
