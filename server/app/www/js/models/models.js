// Generated by CoffeeScript 1.4.0
(function() {
  var BaseModel, Comment, Comments, Message, Messages, Post, Posts, User, Users,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = (function(_super) {

    __extends(BaseModel, _super);

    function BaseModel() {
      this.toTemplateParam = __bind(this.toTemplateParam, this);
      return BaseModel.__super__.constructor.apply(this, arguments);
    }

    BaseModel.prototype.toTemplateParam = function() {
      var result;
      result = this.toJSON();
      result._model = this;
      result.isAutheticated = app.isAuthenticated();
      return result;
    };

    return BaseModel;

  })(Backbone.Model);

  /*
      The Post Model
  */


  Post = (function(_super) {

    __extends(Post, _super);

    function Post() {
      this.shorten = __bind(this.shorten, this);

      this.getFontSize = __bind(this.getFontSize, this);

      this.validateNewPart = __bind(this.validateNewPart, this);

      this.countTotalWords = __bind(this.countTotalWords, this);

      this.countWords = __bind(this.countWords, this);

      this.countTotalLines = __bind(this.countTotalLines, this);

      this.countLines = __bind(this.countLines, this);

      this.isLoadedAsync = __bind(this.isLoadedAsync, this);

      this.sanitize = __bind(this.sanitize, this);

      this.canAddContent = __bind(this.canAddContent, this);

      this.isOpen = __bind(this.isOpen, this);

      this.isOwner = __bind(this.isOwner, this);

      this.hasContribs = __bind(this.hasContribs, this);

      this.getPartSelector = __bind(this.getPartSelector, this);

      this.getCompletionMessage = __bind(this.getCompletionMessage, this);

      this.getContribMessage = __bind(this.getContribMessage, this);

      this.getContribForm = __bind(this.getContribForm, this);

      this.getPartEditor = __bind(this.getPartEditor, this);

      this.summarizeContent = __bind(this.summarizeContent, this);

      this.getPostName = __bind(this.getPostName, this);

      this.formatType = __bind(this.formatType, this);

      this.formatNotes = __bind(this.formatNotes, this);

      this.formatAsIcon = __bind(this.formatAsIcon, this);

      this.getFreeVerseTitle = __bind(this.getFreeVerseTitle, this);

      this.formatParts = __bind(this.formatParts, this);

      this.format = __bind(this.format, this);

      this.url = __bind(this.url, this);
      return Post.__super__.constructor.apply(this, arguments);
    }

    Post.prototype.idAttribute = "_id";

    Post.prototype.url = function() {
      if (this.id) {
        return Poe3.apiUrl("posts/" + this.id);
      } else if (this.get('uid')) {
        return Poe3.apiUrl("posts", {
          filter: 'uid',
          uid: this.get('uid')
        });
      } else {
        return Poe3.apiUrl("posts");
      }
    };

    Post.prototype.format = function(viewType) {
      if (viewType == null) {
        viewType = 'full';
      }
      return this.formatParts(this.get('type'), this.get('selectedParts'), viewType);
    };

    Post.prototype.formatParts = function(type, parts, viewType) {
      var content, lastPart, part, _i, _j, _k, _len, _len1, _len2;
      if (viewType == null) {
        viewType = 'full';
      }
      try {
        if (this.isOpen() && (viewType === 'full') && this.get('createdBy').id === app.getUser().id) {
          lastPart = parts.slice(-1)[0];
          switch (type) {
            case 'haiku':
              content = '';
              for (_i = 0, _len = parts.length; _i < _len; _i++) {
                part = parts[_i];
                if (parts.length === 1) {
                  content = part.content;
                } else {
                  if (part === lastPart) {
                    content += "<div class=\"last\"><span class=\"remove-part\" data-partid=\"" + part.id + "\">Remove</span>" + part.content + "</div>";
                  } else {
                    content += "<div>" + part.content + "</div>";
                  }
                }
              }
              content = content.replace(/\n/g, "<br />");
              return '<div class="post-text haiku">' + content + "</div>";
            case 'six-word-story':
              content = '';
              for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
                part = parts[_j];
                if (parts.length === 1) {
                  content = part.content;
                } else {
                  if (part === lastPart) {
                    content += "<span class=\"last\"><span class=\"remove-part\" data-partid=\"" + part.id + "\">Remove</span>" + part.content + "</span>";
                  } else {
                    content += "" + part.content + " ";
                  }
                }
              }
              return '<p class="post-text six-word-story">' + content + "</p>";
            case 'quote':
              content = parts[0].content;
              return '<p class="post-text quote">' + content + "</p>";
            case 'free-verse':
              content = '';
              for (_k = 0, _len2 = parts.length; _k < _len2; _k++) {
                part = parts[_k];
                if (parts.length === 1) {
                  content = "<p>" + part.content + "</p>";
                } else {
                  if (part === lastPart) {
                    content += "<div class=\"last\"><span class=\"remove-part\" data-partid=\"" + part.id + "\">Remove</span><p>" + part.content + "</p></div>";
                  } else {
                    content += "<p>" + part.content + "</p>";
                  }
                }
              }
              content = content.replace(/\n\n/g, "</p><p>");
              content = content.replace(/\n/g, "<br />");
              if (viewType === 'full' && this.get('title')) {
                return '<div class="post-text free-verse"><h3 class="title">' + this.get('title') + '</h3>' + content + "</div>";
              } else {
                return '<div class="post-text free-verse">' + content + "</div>";
              }
          }
        } else {
          switch (type) {
            case 'haiku':
              content = ((function() {
                var _l, _len3, _results;
                _results = [];
                for (_l = 0, _len3 = parts.length; _l < _len3; _l++) {
                  part = parts[_l];
                  _results.push(part.content);
                }
                return _results;
              })()).join('\n');
              content = content.replace(/\n/g, "<br />");
              return '<p class="post-text haiku">' + content + "</p>";
            case 'six-word-story':
              content = ((function() {
                var _l, _len3, _results;
                _results = [];
                for (_l = 0, _len3 = parts.length; _l < _len3; _l++) {
                  part = parts[_l];
                  _results.push(part.content);
                }
                return _results;
              })()).join(' ');
              return '<p class="post-text six-word-story">' + content + "</p>";
            case 'quote':
              content = parts[0].content;
              return '<p class="post-text quote">' + content + "</p>";
            case 'free-verse':
              content = ((function() {
                var _l, _len3, _results;
                _results = [];
                for (_l = 0, _len3 = parts.length; _l < _len3; _l++) {
                  part = parts[_l];
                  _results.push("<p>" + part.content + "</p>");
                }
                return _results;
              })()).join('');
              content = content.replace(/\n\n/g, "</p><p>");
              content = content.replace(/\n/g, "<br />");
              if ((viewType === 'full' || viewType === 'condensed') && this.get('title')) {
                return '<div class="post-text free-verse"><h3 class="title">' + this.get('title') + '</h3>' + content + "</div>";
              } else {
                return '<div class="post-text free-verse">' + content + "</div>";
              }
          }
        }
      } catch (error) {
        return '';
      }
    };

    Post.prototype.getFreeVerseTitle = function() {
      var _ref;
      return (_ref = this.get('title')) != null ? _ref : this.get('selectedParts')[0].content.split('\n')[0];
    };

    Post.prototype.formatAsIcon = function() {
      var bgcolor, content, forecolor, index, part, parts, text;
      if (this.get('attachmentType') === 'image') {
        return "<div class=\"with-image\">                <div class=\"container\" style=\"background-image: url('" + (this.get('attachment')) + "')\">                </div>            </div>";
      } else {
        parts = this.get('selectedParts');
        text = (function() {
          switch (this.get('type')) {
            case 'haiku':
              content = ((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = parts.length; _i < _len; _i++) {
                  part = parts[_i];
                  _results.push(part.content);
                }
                return _results;
              })()).join('\n');
              content = content.replace(/\n/g, "<br />");
              return '<p class="post-text haiku">' + content + "</p>";
            case 'six-word-story':
              content = ((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = parts.length; _i < _len; _i++) {
                  part = parts[_i];
                  _results.push(part.content);
                }
                return _results;
              })()).join('\n');
              content = content.replace(/\n/g, "<br />");
              return '<p class="post-text six-word-story">' + content + "</p>";
            case 'quote':
              content = parts[0].content;
              return '<p class="post-text quote">' + content + "</p>";
            case 'free-verse':
              if (this.get('title')) {
                return '<p class="post-text free-verse">' + this.get('title') + "</p>";
              } else {
                return '<p class="post-text free-verse">' + this.getFreeVerseTitle() + "</p>";
              }
          }
        }).call(this);
        index = Poe3.getHashCode(text.slice(0, 10)) % 6;
        bgcolor = ['#789', '#798', '#879', '#897', '#987', '#978'][index];
        forecolor = ['#013', '#031', '#103', '#130', '#310', '#301'][index];
        return "<div class=\"just-text\" style=\"background-color:" + bgcolor + ";color:" + forecolor + "\">                " + text + "            </div>";
      }
    };

    Post.prototype.formatNotes = function() {
      var notes;
      notes = this.get('notes');
      if (notes) {
        notes = notes.replace(/\n\n/g, "</p><p>");
        return notes.replace(/\n/g, "<br />");
      }
    };

    Post.prototype.formatType = function() {
      if (this.get('type') !== 'free-verse') {
        return this.get('type').replace('-', ' ');
      } else {
        return 'poem';
      }
    };

    Post.prototype.getPostName = function(maxLength, prefixType) {
      var name, part, text, type;
      name = (function() {
        var _ref;
        switch (this.get('type')) {
          case 'haiku':
            type = prefixType ? 'Haiku ' : '';
            name = this.shorten(this.get('selectedParts')[0].content, maxLength);
            return "" + type + name;
          case 'six-word-story':
            type = prefixType ? 'Six Word Story ' : '';
            text = ((function() {
              var _i, _len, _ref, _results;
              _ref = this.get('selectedParts');
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                part = _ref[_i];
                _results.push(part.content);
              }
              return _results;
            }).call(this)).join(' ');
            name = this.shorten(text, maxLength);
            return "" + type + name;
          case 'quote':
            type = prefixType ? 'Quote ' : '';
            name = this.shorten(this.get('selectedParts')[0].content, maxLength);
            return "" + type + name;
          case 'free-verse':
            type = prefixType ? 'Free Verse ' : '';
            name = this.shorten((_ref = this.title) != null ? _ref : this.get('selectedParts')[0].content, maxLength);
            return "" + type + name;
        }
      }).call(this);
      return name.replace(/,*$/, '');
    };

    Post.prototype.summarizeContent = function(type) {
      var lines, part, parts, text;
      parts = this.get('selectedParts');
      return text = (function() {
        var _i, _j, _len, _len1;
        switch (this.get('type')) {
          case 'haiku':
            if (type === "short") {
              return parts[0].content.split('\n')[0] + " ...";
            } else if (type === "full") {
              lines = [];
              for (_i = 0, _len = parts.length; _i < _len; _i++) {
                part = parts[_i];
                lines = lines.concat(part.content.split('\n'));
              }
              return lines.join('\n');
            }
            break;
          case 'six-word-story':
            return ((function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
                part = parts[_j];
                _results.push(part.content);
              }
              return _results;
            })()).join(' ');
          case 'quote':
            return parts[0].content;
          case 'free-verse':
            lines = [];
            for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
              part = parts[_j];
              lines = lines.concat(part.content.split('\n'));
            }
            if (lines.length > 5) {
              lines = lines.slice(0, 5);
              lines.push(" ...");
            }
            return lines.join('\n');
        }
      }).call(this);
    };

    Post.prototype.getPartEditor = function() {
      var editor, partSelection;
      if (this.canAddContent()) {
        editor = this.isOwner() && this.hasContribs() ? (partSelection = this.hasContribs() ? this.getPartSelector() : '', "" + partSelection + "                <div class=\"section add-part\" style=\"display:none\">                    " + (this.getContribForm()) + "                                            </div>") : "<div class=\"section add-part\">                    " + (this.getContribForm()) + "                 </div>";
        return editor;
      } else {
        return '';
      }
    };

    Post.prototype.getContribForm = function() {
      var form, part, parts, partsHtml, _i, _len;
      form = (function() {
        switch (this.get('type')) {
          case 'haiku':
            return '<p>' + this.getContribMessage() + '<br /><textarea class="content" placeholder="Write here."></textarea></p>\
                 <p class="content-error hidden"></p>\
                 <div class="actions"><button class="submit"><i class="icon-ok"></i>Add Lines</button></div>';
          case 'six-word-story':
            return '<p>' + this.getContribMessage() + '<br /><textarea class="content" placeholder="Write here."></textarea></p>\
                 <p class="content-error hidden"></p>\
                 <div class="actions"><button class="submit"><i class="icon-ok"></i>Add Words</button></div>';
          case 'free-verse':
            return '<p>' + this.getContribMessage() + '<br /><textarea class="content" placeholder="Write here."></textarea></p>\
                 <p class="content-error hidden"></p>\
                 <div class="actions"><button class="submit"><i class="icon-ok"></i>Add Lines</button></div>';
        }
      }).call(this);
      parts = (function() {
        var _i, _len, _ref, _results;
        _ref = this.get('parts');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          if (part.sequence === this.get('selectedParts').length) {
            _results.push(part);
          }
        }
        return _results;
      }).call(this);
      if (parts.length) {
        partsHtml = '';
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          partsHtml += '<li>\
                            <img class="profile-pic" src="' + part.createdBy.thumbnail + '" alt="' + part.createdBy.name + '" />' + this.formatParts(this.get('type'), [part], 'partial') + '   <div style="clear:both"></div>\
                        </li>';
        }
        form += "                <div class=\"section part-listing\">                    <p>Contributions awaiting approval:</p>                    <ul>" + partsHtml + "</ul>                </div>";
      }
      return form;
    };

    Post.prototype.getContribMessage = function() {
      var message, remaining;
      message = (function() {
        switch (this.get('type')) {
          case 'haiku':
            remaining = 3 - this.countTotalLines();
            if (remaining === 1) {
              return 'You can add the last line';
            } else {
              return 'You can add one or two lines';
            }
            break;
          case 'six-word-story':
            remaining = 6 - this.countTotalWords();
            if (remaining === 1) {
              return 'You can add the last word';
            } else {
              return "You can add up to " + remaining + " words";
            }
            break;
          case 'free-verse':
            return 'Add more lines to the poem';
        }
      }).call(this);
      if (this.isOwner() && this.hasContribs()) {
        return message + ', or <a href="#" class="select-contrib-link">select a contribution</a>.';
      } else {
        return "" + message + ".";
      }
    };

    Post.prototype.getCompletionMessage = function() {
      var canPublish, message, remaining;
      if (this.isOpen() && this.isOwner()) {
        message = (function() {
          switch (this.get('type')) {
            case 'haiku':
              remaining = 3 - this.countTotalLines();
              if (remaining === 0) {
                canPublish = true;
                return 'This haiku is ready. Make it visible by publishing it.';
              } else {
                if (remaining === 1) {
                  return 'One more line is required to publish this.';
                } else {
                  return 'Two more lines are required to publish this.';
                }
              }
              break;
            case 'six-word-story':
              remaining = 6 - this.countTotalWords();
              if (remaining === 0) {
                canPublish = true;
                return 'This story is ready. Make it visible by publishing it.';
              } else {
                if (remaining === 1) {
                  return 'One more word is required to publish this.';
                } else {
                  return "Add " + remaining + " words to publish this.";
                }
              }
              break;
            case 'free-verse':
              canPublish = true;
              return 'If this poem is complete, publish it to make it visible to others.';
          }
        }).call(this);
        if (canPublish) {
          return {
            text: '<p class="text">' + message + '</p><p class="actions"><button class="publish"><i class="icon-ok"></i>Publish</button></p>',
            type: 'success'
          };
        } else {
          return {
            text: '<p class="text">' + message + '</p>'
          };
        }
      }
    };

    Post.prototype.getPartSelector = function() {
      var html, part, parts, _i, _len;
      parts = (function() {
        var _i, _len, _ref, _results;
        _ref = this.get('parts');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          if (part.sequence === this.get('selectedParts').length) {
            _results.push(part);
          }
        }
        return _results;
      }).call(this);
      html = '';
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        html += '<li class="part-select-item" data-partid="' + part.id + '">\
                        <img class="profile-pic" src="' + part.createdBy.thumbnail + '" alt="' + part.createdBy.name + '" />' + this.formatParts(this.get('type'), [part], 'partial') + '   <div style="clear:both"></div>\
                    </li>';
      }
      return '<div class="section part-select-container">\
            <p>Choose a contribution below or <a href="#" class="write-part-link">write your own</a>.</p>\
            <ul>' + html + '</ul>\
            <div style="clear:both"></div>\
        </div>';
    };

    Post.prototype.hasContribs = function() {
      var part;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.get('parts');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          if (part.sequence === this.get('selectedParts').length) {
            _results.push(part);
          }
        }
        return _results;
      }).call(this)).length !== 0;
    };

    Post.prototype.isOwner = function() {
      return this.get('createdBy').id === app.getUser().id;
    };

    Post.prototype.isOpen = function() {
      return this.get('state') === 'open' || this.get('state') === 'open-unmodifiable';
    };

    Post.prototype.canAddContent = function() {
      return this.isOpen() && (function() {
        switch (this.get('type')) {
          case 'haiku':
            return this.countTotalLines() < 3;
          case 'six-word-story':
            return this.countTotalWords() < 6;
          case 'quote':
            return false;
          case 'free-verse':
            return true;
        }
      }).call(this);
    };

    Post.prototype.sanitize = function(text) {
      text = text.replace(/^\s+|\s+$/g, '');
      text = text.replace(/[ \t]{2,}/g, ' ');
      return text;
    };

    Post.prototype.isLoadedAsync = function() {
      return this.get('attachmentType') === 'image';
    };

    Post.prototype.countLines = function(text) {
      return text.split("\n").length;
    };

    Post.prototype.countTotalLines = function() {
      var part, sum;
      sum = function(a, b) {
        return a + b;
      };
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.get('selectedParts');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          _results.push(this.countLines(part.content));
        }
        return _results;
      }).call(this)).reduce(sum, 0);
    };

    Post.prototype.countWords = function(text) {
      return text.split(" ").length;
    };

    Post.prototype.countTotalWords = function() {
      var part, sum;
      sum = function(a, b) {
        return a + b;
      };
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.get('selectedParts');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          _results.push(this.countWords(part.content));
        }
        return _results;
      }).call(this)).reduce(sum, 0);
    };

    Post.prototype.validateNewPart = function(content) {
      var newLines, newWords, remaining;
      content = this.sanitize(content);
      if (!content) {
        return {
          isValid: false,
          error: "You haven't written anything."
        };
      } else {
        if (this.get('type') === 'haiku') {
          remaining = 3 - this.countTotalLines();
          newLines = this.countLines(content);
          if (!(newLines <= remaining)) {
            if (remaining === 1) {
              return {
                isValid: false,
                error: "A Haiku has three lines, and two lines have already been written. You may only write the last."
              };
            } else {
              return {
                isValid: false,
                error: "A Haiku has three lines, and one line has already been written. You may write the last two."
              };
            }
          }
        } else if (this.get('type') === 'six-word-story') {
          remaining = 6 - this.countTotalWords();
          newWords = this.countWords(content);
          if (!(newWords <= remaining)) {
            if (remaining === 1) {
              return {
                isValid: false,
                error: "A Six Word Story has six words, and five words have already been written. You may only write the last word."
              };
            } else if (remaining === 5) {
              return {
                isValid: false,
                error: "A Six Word Story has six words, and one word has already been written. You may only write five words."
              };
            } else {
              return {
                isValid: false,
                error: "A Six Word Story has six words, and " + (toWords(this.countTotalWords())) + " words have already been written. You may only write " + remaining + " words."
              };
            }
          }
        }
        return {
          isValid: true
        };
      }
    };

    Post.prototype.getFontSize = function(containerSize) {
      var charCount, line, lineCount, maxLength, part, _i, _j, _len, _len1, _ref, _ref1;
      maxLength = 0;
      lineCount = 0;
      charCount = 0;
      _ref = this.get('selectedParts');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        _ref1 = part.content.split('\n');
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          line = _ref1[_j];
          lineCount++;
          charCount += line.length;
          if (line.length > maxLength) {
            maxLength = line.length;
          }
        }
      }
      if (lineCount > 10 || charCount > 180) {
        16;

      }
      if (this.get('type') === 'quote') {
        24;

      }
      if (lineCount > 8) {
        return 14;
      } else if (lineCount > 3) {
        if (maxLength > 50) {
          return 16;
        } else if (maxLength > 30) {
          return 18;
        } else {
          return 20;
        }
      } else {
        if (maxLength > 50) {
          return 18;
        } else if (maxLength > 30) {
          return 20;
        } else {
          return 22;
        }
      }
    };

    Post.prototype.shorten = function(text, length) {
      var lines;
      lines = text.split('\n');
      if (length && lines[0].length > length) {
        return lines[0].substring(0, length) + "...";
      } else {
        return lines[0];
      }
    };

    return Post;

  })(BaseModel);

  window.Poe3.Post = Post;

  /*
      The Posts Collection
  */


  Posts = (function(_super) {

    __extends(Posts, _super);

    function Posts() {
      this.url = __bind(this.url, this);
      return Posts.__super__.constructor.apply(this, arguments);
    }

    Posts.prototype.model = Post;

    Posts.prototype.url = function() {
      return Poe3.apiUrl('posts');
    };

    return Posts;

  })(Backbone.Collection);

  Post.collection = Poe3.Posts;

  window.Poe3.Posts = Posts;

  /*
      The User Model
  */


  User = (function(_super) {

    __extends(User, _super);

    function User() {
      this.isFollowedBy = __bind(this.isFollowedBy, this);

      this.url = __bind(this.url, this);
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.url = function() {
      if (this.id) {
        return Poe3.apiUrl("users/" + this.id);
      } else if (this.get('domain') && this.get('username')) {
        return Poe3.apiUrl("users", {
          domain: this.get('domain'),
          username: this.get('username')
        });
      }
    };

    User.prototype.isFollowedBy = function(userid) {
      var follower, matching;
      matching = (function() {
        var _i, _len, _ref, _results;
        _ref = this.get('followers');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          follower = _ref[_i];
          if (follower.id === userid) {
            _results.push(follower);
          }
        }
        return _results;
      }).call(this);
      return matching.length !== 0;
    };

    return User;

  })(BaseModel);

  window.Poe3.User = User;

  /*
      The Users Collection
  */


  Users = (function(_super) {

    __extends(Users, _super);

    function Users() {
      this.url = __bind(this.url, this);
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.model = User;

    Users.prototype.url = function() {
      return Poe3.apiUrl('users');
    };

    return Users;

  })(Backbone.Collection);

  User.collection = Poe3.Users;

  window.Poe3.Users = Users;

  /*
      The Comment Model
  */


  Comment = (function(_super) {

    __extends(Comment, _super);

    function Comment() {
      return Comment.__super__.constructor.apply(this, arguments);
    }

    return Comment;

  })(BaseModel);

  window.Poe3.Comment = Comment;

  /*
      The Comments Collection
  */


  Comments = (function(_super) {

    __extends(Comments, _super);

    function Comments() {
      this.url = __bind(this.url, this);
      return Comments.__super__.constructor.apply(this, arguments);
    }

    Comments.prototype.model = Comment;

    Comments.prototype.url = function() {
      if (this.postid) {
        return Poe3.apiUrl("posts/" + this.postid + "/comments");
      } else {
        throw "The postid property is not defined for this Messages instance.";
      }
    };

    return Comments;

  })(Backbone.Collection);

  window.Poe3.Comments = Comments;

  /*
      The Message Model
  */


  Message = (function(_super) {

    __extends(Message, _super);

    function Message() {
      this.toHtml = __bind(this.toHtml, this);
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.prototype.idAttribute = "_id";

    Message.prototype.toHtml = function(viewType) {
      var data, joined, post, user, what, _ref;
      if (viewType == null) {
        viewType = 'full';
      }
      data = this.get('data');
      switch (this.get('reason')) {
        case 'new-user':
          user = new Poe3.User(data.user);
          switch (this.get('type')) {
            case 'global-notification':
              joined = ((_ref = data.location) != null ? _ref.name : void 0) ? "joined from " + data.location.name : "joined";
              return "                        <div class=\"message-body\">                            <a href=\"/" + (user.get('domain')) + "/" + (user.get('username')) + "\"><img src=\"" + (user.get('thumbnail')) + "\" alt=\"" + (user.get('name')) + "\" /></a>                            <p>                                <a href=\"/" + (user.get('domain')) + "/" + (user.get('username')) + "\">" + (user.get('name')) + "</a> " + joined + ".                            </p>                        </div>";
          }
          break;
        case 'new-post':
          post = new Poe3.Post(data.post);
          switch (this.get('type')) {
            case 'global-notification':
              if (post.get('authoringMode') === 'collaborative') {
                what = "Started <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>.";
              } else {
                what = "Completed <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>.";
              }
              return "                        <div class=\"message-body\">                            <a href=\"/" + (post.get('createdBy').domain) + "/" + (post.get('createdBy').username) + "\"><img src=\"" + (post.get('createdBy').thumbnail) + "\" alt=\"" + (post.get('createdBy').name) + "\" /></a>                            <p>                                " + what + "                            </p>                        </div>";
          }
          break;
        case 'part-contribution':
          post = new Poe3.Post(data.post);
          switch (this.get('type')) {
            case 'user-notification':
              switch (viewType) {
                case 'full':
                  return "                                <div class=\"message-body\">                                          <p>                                        Contributed to <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>                                    </p>                                    <p class=\"subtext\">                                        " + (post.shorten(data.part.content, 300)) + "                                    </p>                                </div>";
                case 'condensed':
                  return "                                <div class=\"message-body\">                                          <a href=\"/" + data.part.createdBy.domain + "/" + data.part.createdBy.username + "\"><img src=\"" + data.part.createdBy.thumbnail + "\" alt=\"" + data.part.createdBy.name + "\" /></a>                                     <p>                                        contributed to <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>                                    </p>                                </div>";
              }
              break;
            case 'global-notification':
              switch (viewType) {
                case 'condensed':
                  return "                                <div class=\"message-body\">                                          <a href=\"/" + data.part.createdBy.domain + "/" + data.part.createdBy.username + "\"><img src=\"" + data.part.createdBy.thumbnail + "\" alt=\"" + data.part.createdBy.name + "\" /></a>                                     <p>                                        contributed to <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>                                    </p>                                </div>";
              }
          }
          break;
        case 'liked-post':
          post = new Poe3.Post(data.post);
          switch (this.get('type')) {
            case 'user-notification':
              switch (viewType) {
                case 'full':
                  return "                                <div class=\"message-body\">                                          <p>                                        Likes <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>                                    </p>                                </div>";
                case 'condensed':
                  return "                                <div class=\"message-body\">                                          <a href=\"/" + (this.get('from').domain) + "/" + (this.get('from').username) + "\"><img src=\"" + (this.get('from').thumbnail) + "\" alt=\"" + (this.get('from').name) + "\" /></a>                                     <p>                                        likes <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>                                    </p>                                </div>";
              }
          }
          break;
        case 'added-comment':
          post = new Poe3.Post(data.post);
          switch (this.get('type')) {
            case 'user-notification':
              switch (viewType) {
                case 'full':
                  return "                                <div class=\"message-body\">                                          <p>                                        Commented on <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>                                    </p>                                    <p class=\"subtext\">                                        " + (post.shorten(data.comment.content, 300)) + "                                    </p>                                </div>";
                case 'condensed':
                  return "                                <div class=\"message-body\">                                          <a href=\"/" + data.comment.createdBy.domain + "/" + data.comment.createdBy.username + "\"><img src=\"" + data.comment.createdBy.thumbnail + "\" alt=\"" + data.comment.createdBy.name + "\" /></a>                                     <p>                                        commented on <a href=\"/" + (post.get('uid')) + "\">" + (post.getPostName(56, false)) + "</a>                                    </p>                                </div>";
              }
          }
          break;
        case 'new-follower':
          switch (this.get('type')) {
            case 'user-notification':
              switch (viewType) {
                case 'full':
                  return "                                <div class=\"message-body\">                                          <p>                                        Started following you.                                    </p>                                </div>";
                case 'condensed':
                  return "                                <div class=\"message-body\">                                          <a href=\"/" + (this.get('from').domain) + "/" + (this.get('from').username) + "\"><img src=\"" + (this.get('from').thumbnail) + "\" alt=\"" + (this.get('from').name) + "\" /></a>                                     <p>                                        started following you.                                    </p>                                </div>";
              }
          }
          break;
        case 'promo-internal':
          return data;
        default:
          return '';
      }
    };

    return Message;

  })(BaseModel);

  window.Poe3.Message = Message;

  /*
      The Messages Collection
  */


  Messages = (function(_super) {

    __extends(Messages, _super);

    function Messages() {
      this.url = __bind(this.url, this);
      return Messages.__super__.constructor.apply(this, arguments);
    }

    Messages.prototype.model = Message;

    Messages.prototype.url = function() {
      if (this.userid) {
        return Poe3.apiUrl("users/" + this.userid + "/messages");
      } else {
        throw "The userid property is not defined for this Messages instance.";
      }
    };

    return Messages;

  })(Backbone.Collection);

  User.collection = Poe3.Messages;

  window.Poe3.Messages = Messages;

}).call(this);
