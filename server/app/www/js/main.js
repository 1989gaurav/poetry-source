// Generated by CoffeeScript 1.5.0
(function() {
  var App, TopMenu,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = (function(_super) {

    __extends(App, _super);

    function App() {
      this.onInit = __bind(this.onInit, this);
      this.pathToUrl = __bind(this.pathToUrl, this);
      this.loadScript = __bind(this.loadScript, this);
      this.shareOnFacebook = __bind(this.shareOnFacebook, this);
      this.navigate = __bind(this.navigate, this);
      this.clearCookies = __bind(this.clearCookies, this);
      this.refreshApp = __bind(this.refreshApp, this);
      this._loginEx = __bind(this._loginEx, this);
      this.logout = __bind(this.logout, this);
      this.login = __bind(this.login, this);
      this.isAuthenticated = __bind(this.isAuthenticated, this);
      this.getUser = __bind(this.getUser, this);
      this.onFBLoad = __bind(this.onFBLoad, this);
      this.processFBAuthResponse = __bind(this.processFBAuthResponse, this);
      this.requiresLogin = __bind(this.requiresLogin, this);
      this.defineModalRoute = __bind(this.defineModalRoute, this);
      this.definePageRoute = __bind(this.definePageRoute, this);
      this.taggedUserView = __bind(this.taggedUserView, this);
      this.editUser = __bind(this.editUser, this);
      this.userView = __bind(this.userView, this);
      this.postView = __bind(this.postView, this);
      this.newPost = __bind(this.newPost, this);
      this.posts = __bind(this.posts, this);
      this.route = __bind(this.route, this);
      this.initialize = __bind(this.initialize, this);      this.activeView = null;
      this.activeModals = [];
      App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var domain, _fn, _i, _len, _ref,
        _this = this;
      this.route("", "home", (function() {
        return _this.posts({
          category: 'popular'
        });
      }), 'page');
      _ref = ['poets', 'fb', 'tw'];
      _fn = function(domain) {
        _this.route("" + domain + "/:username", "userView", (function(username) {
          return _this.userView(domain, username);
        }), 'page');
        _this.route("" + domain + "/:username/:section", "userTagsView", (function(username, section) {
          return _this.userView(domain, username, section);
        }), 'page');
        _this.route("" + domain + "/:username/edit", "editUser", (function(username) {
          return _this.editUser(domain, username);
        }), 'modal');
        return _this.route("" + domain + "/:username/tagged/:tag", "taggedUserView", (function(username, tag) {
          return _this.taggedUserView(domain, username, tag);
        }), 'page');
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        domain = _ref[_i];
        _fn(domain);
      }
      this.route("posts", "posts", this.posts, 'page');
      this.route("posts/:category", "categoryPosts", (function(category) {
        return _this.posts({
          category: category
        });
      }), 'page');
      this.route("posts/:category/:subcategory", "categoryAndSubCategoryPosts", (function(category, subCategory) {
        return _this.posts({
          category: category,
          subCategory: subCategory
        });
      }), 'page');
      this.route("posts/:category/:subcategory/tagged/:tag", "categoryAndSubCategoryPostsAndTag", (function(category, subCategory, tag) {
        return _this.posts({
          category: category,
          subCategory: subCategory,
          tag: tag
        });
      }), 'page');
      this.route("posts/:category/tagged/:tag", "taggedPostsViewWithCat", (function(category, tag) {
        return _this.posts({
          tag: tag,
          category: category
        });
      }), 'page');
      this.route("posts/tagged/:tag", "taggedPostsView", (function(tag) {
        return _this.posts({
          tag: tag
        });
      }), 'page');
      this.route("posts/new", "newPost", this.newPost, 'page');
      this.route(/^([0-9]+)$/, "postView", this.postView, 'modal');
      return $(document).ready(this.onInit);
    };

    App.prototype.route = function(url, name, handler, type) {
      if (type === 'page') {
        return App.__super__.route.call(this, url, name, this.definePageRoute(handler));
      } else if (type === 'modal') {
        return App.__super__.route.call(this, url, name, this.defineModalRoute(handler));
      }
    };

    App.prototype.posts = function(params) {
      return new Poe3.PostsView(params, {});
    };

    App.prototype.newPost = function() {
      var _this = this;
      return this.requiresLogin('/posts/new', function() {
        return new Poe3.NewPostView;
      });
    };

    App.prototype.postView = function(uid) {
      return new Poe3.PostView(uid);
    };

    App.prototype.userView = function(domain, username, section) {
      if (section == null) {
        section = "completed";
      }
      return new Poe3.UserView(domain, username, section);
    };

    App.prototype.editUser = function(domain, username) {
      var view;
      return view = new Poe3.EditUserView(domain, username);
    };

    App.prototype.taggedUserView = function(domain, username, tag) {
      var posts,
        _this = this;
      posts = new Poe3.Posts;
      return posts.fetch({
        data: {
          domain: domain,
          username: username,
          state: 'complete'
        },
        success: function() {
          var p, tagged, _posts;
          _posts = posts.toArray();
          tagged = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = _posts.length; _i < _len; _i++) {
              p = _posts[_i];
              if (p.get('tags').indexOf(tag) !== -1) {
                _results.push(p);
              }
            }
            return _results;
          })();
          return new Poe3.PostView({
            mode: 'gallery',
            data: {
              posts: tagged
            }
          });
        }
      });
    };

    App.prototype.definePageRoute = function(fn) {
      var _this = this;
      return function() {
        var _ref, _ref1;
        if (((_ref = _this.activeView) != null ? _ref.href : void 0) === window.location.href) {
          if ($('.modal-popup').length) {
            $('.modal-popup').trigger('close', {
              navigateBack: false
            });
            return _this.activeModals = [];
          } else if ((_ref1 = _this.activeView) != null ? _ref1.modalClosed : void 0) {
            return _this.activeView.modalClosed = false;
          } else {
            return fn.apply(_this, arguments);
          }
        } else {
          return fn.apply(_this, arguments);
        }
      };
    };

    App.prototype.defineModalRoute = function(fn) {
      var _this = this;
      return function() {
        return fn.apply(_this, arguments);
      };
    };

    App.prototype.requiresLogin = function(url, loggedInAction) {
      var loginView;
      if (this.isAuthenticated()) {
        return loggedInAction();
      } else {
        if (this.fbAuthResponseReceived) {
          return loginView = new Poe3.LoginView(loggedInAction, (function() {
            return history.back();
          }));
        } else {
          return this.navigate('/', true);
        }
      }
    };

    App.prototype.processFBAuthResponse = function(response, userInitiated) {
      var _ref;
      this.fbAuthResponseReceived = true;
      /*
          If the user initiated the login, we will have to logout the existing user in any case.
          OTOH, if this was an automatic status check:
              - Ignore this if the cookie/domain isn't facebook
      */

      if (userInitiated || ((_ref = app.getUser()) != null ? _ref.domain : void 0) === 'fb') {
        if (response.status === 'connected') {
          return this.login('fb', response.authResponse.accessToken);
        } else {
          return this.logout();
        }
      }
    };

    App.prototype.onFBLoad = function() {
      var _this = this;
      console.log('FB API loaded.');
      return FB.getLoginStatus(function(resp) {
        if (!_this.fbAuthResponseReceived) {
          return _this.processFBAuthResponse(resp, false);
        }
      });
    };

    App.prototype.getUser = function() {
      return {
        id: $.cookie('userid'),
        domain: $.cookie('domain'),
        username: $.cookie('username'),
        name: $.cookie('fullName'),
        passkey: $.cookie('passkey')
      };
    };

    App.prototype.isAuthenticated = function() {
      return this.getUser().id;
    };

    App.prototype.login = function(domain, accessToken) {
      var currentUser,
        _this = this;
      currentUser = app.getUser();
      return $.post(Poe3.apiUrl('sessions'), {
        domain: domain,
        accessToken: accessToken
      }, function(resp) {
        var options;
        options = {};
        $.cookie('userid', resp.userid, options);
        $.cookie('domain', resp.domain, options);
        $.cookie('username', resp.username, options);
        $.cookie('fullName', resp.name, options);
        $.cookie('passkey', resp.passkey, options);
        return _this.refreshApp({
          skipNotifications: currentUser.passkey === resp.passkey
        });
      });
    };

    App.prototype.logout = function() {
      this.clearCookies();
      return this.refreshApp();
    };

    App.prototype._loginEx = function(resp) {
      var options;
      options = {};
      $.cookie('userid', resp.userid, options);
      $.cookie('domain', resp.domain, options);
      $.cookie('username', resp.username, options);
      $.cookie('fullName', resp.name, options);
      $.cookie('passkey', resp.passkey, options);
      return this.refreshApp();
    };

    App.prototype.refreshApp = function(options) {
      if (options == null) {
        options = {};
      }
      this.topMenu.refresh();
      if (!options.skipNotifications) {
        this.notifications.clear();
        return this.notifications.sync();
      }
    };

    App.prototype.clearCookies = function() {
      $.removeCookie('userid');
      $.removeCookie('domain');
      $.removeCookie('username');
      $.removeCookie('fullName');
      return $.removeCookie('passkey');
    };

    App.prototype.navigate = function(url, options) {
      App.__super__.navigate.apply(this, arguments);
      return typeof _gaq !== "undefined" && _gaq !== null ? _gaq.push(['_trackPageview', url]) : void 0;
    };

    App.prototype.setAppMode = function(mode) {
      var options;
      options = {};
      return $.cookie('appMode', mode, options);
    };

    App.prototype.getAppMode = function() {
      return $.cookie('appMode');
    };

    App.prototype.resetAppMode = function() {
      return $.removeCookie('appMode');
    };

    App.prototype.shareOnFacebook = function() {
      var _this = this;
      FB.ui({
        method: 'apprequests',
        display: "popup",
        message: "Write Poetry. Together."
      }, function(resp) {
        if (resp) {
          return $.ajax({
            url: Poe3.apiUrl("tokens"),
            data: {
              type: 'facebook-friend-invite',
              key: resp.request,
              value: window.location.href
            },
            type: 'post',
            success: function(token) {}
          });
        }
      });
      return false;
    };

    App.prototype.loadScript = function(src) {
      return $('head').append("<script src=\"" + src + "\"></script>");
    };

    App.prototype.pathToUrl = function(path) {
      if (/http:\/\//.test(path) || /https:\/\//.test(path)) {
        return path;
      }
      if (/^\//.test(path)) {
        path = path.substring(1);
      }
      if (window.location.hostname === 'poe3.com') {
        return "http://www.poe3.com/" + path;
      } else {
        return "http://" + window.location.hostname + "/" + path;
      }
    };

    App.prototype.onInit = function() {
      var _this = this;
      return Poe3.templateLoader.load('Poe3', [
        "NewPostView", "PostListView", "PostListViewItem", "PostsView", "TagListView", "TagListViewItem", {
          view: "PostView",
          templates: {
            template: "PostView",
            commentsTemplate: "PostComments"
          }
        }, "UserListView", {
          view: "UserView",
          templates: {
            container: "UserView",
            userInfo: "UserInfo"
          }
        }, "EditUserView"
      ], function() {
        var key, queryString;
        queryString = Poe3.getQueryString(window.location.href);
        if (queryString.request_ids) {
          key = queryString.request_ids.split(',').pop();
          $.get(Poe3.apiUrl("tokens/facebook-app-request/" + key), function(resp) {
            if (resp != null ? resp.value : void 0) {
              return window.location.href = "/" + resp.value;
            }
          });
        }
        $(window).resize(function() {
          var _ref;
          if ((_ref = _this.activeView) != null ? typeof _ref.resizeOnRefresh === "function" ? _ref.resizeOnRefresh() : void 0 : void 0) {
            if (_this.lastResizedWidth) {
              if (Math.abs($(document).width() - _this.lastResizedWidth) > 32) {
                _this.lastResizedWidth = $(document).width();
                return window.location.reload();
              }
            } else {
              return _this.lastResizedWidth = $(document).width();
            }
          }
        });
        Backbone.history = Backbone.history || new Backbone.History({});
        Backbone.history.start({
          pushState: true,
          root: '/'
        });
        $('.sidebar').mouseover(function() {
          return $('.sidebar .menu').css('opacity', '1.0');
        }).mouseout(function() {
          return $('.sidebar .menu').css('opacity', '0.5');
        });
        _this.topMenu = new TopMenu;
        _this.topMenu.refresh();
        window.Poe3.initFB();
        window.Poe3.fixAnchors('.logo');
        _this.notifications = new Poe3.Notifications;
        return _this.notifications.sync();
      });
    };

    return App;

  })(Backbone.Router);

  window.app = new App;

  TopMenu = (function() {

    function TopMenu() {
      this.shortenName = __bind(this.shortenName, this);
      this.attachHandlers = __bind(this.attachHandlers, this);
      this.positionMessageAlert = __bind(this.positionMessageAlert, this);
      this.refresh = __bind(this.refresh, this);
      var _this = this;
      $('.menu-container').html('\
            <ul class="menu">\
                <li class="new-poem"><a href="/posts/new">New Poem</a></li>\
                <li class="login hidden">\
                    <span class="txt">Login</span>\
                    <img class="facebook" src="/images/facebook.png" />\
                    <img class="twitter" src="/images/twitter.png" />\
                </li>\
                <li class="profile hidden">\
                    <p class="main-message-alert" style="display:none"><i class="icon-comment"></i><span class="msg-count"></span></p>                    \
                    <a href="#" class="name"></a>\
                </li>\
                <li class="logout hidden"><i class="icon-signout"></i><a id="logout" href="#">Logout</a></li>\
            </ul>');
      $('.topbar .menu .profile .main-message-alert').click(function() {
        app.navigate("/" + (app.getUser().domain) + "/" + (app.getUser().username) + "/messages", true);
        return false;
      });
    }

    TopMenu.prototype.refresh = function() {
      var profileIcon;
      if (app.isAuthenticated()) {
        $('.topbar .menu .login').hide();
        $('.topbar .menu .profile .name').html(app.getUser().name);
        $('.topbar .menu .profile, .topbar .menu .logout').show();
        profileIcon = (function() {
          switch (app.getUser().domain) {
            case 'fb':
              return '/images/facebook.png';
            case 'tw':
              return '/images/twitter.png';
          }
        })();
        if (profileIcon) {
          $('.topbar .menu .profile .name').css('background', "url(" + profileIcon + ") no-repeat 0px 0px");
          $('.topbar .menu .profile .name').css('background-size', '16px 16px');
        }
        $('.topbar .menu .profile span.icon').html(profileIcon);
        this.positionMessageAlert();
      } else {
        $('.topbar .menu .profile, .topbar .menu .logout').hide();
        $('.topbar .menu .login').show();
      }
      Poe3.fixAnchors('.topbar');
      return this.attachHandlers();
    };

    TopMenu.prototype.positionMessageAlert = function() {
      var alertPos;
      alertPos = $('.topbar .menu .profile .name').position().left + $('.topbar .menu .profile .name').width();
      return $('.main-message-alert').css('left', "" + alertPos + "px");
    };

    TopMenu.prototype.attachHandlers = function() {
      var _this = this;
      $(document).bindNew('click', '.topbar .menu .profile', function() {
        if (app.isAuthenticated()) {
          app.navigate("/" + (app.getUser().domain) + "/" + (app.getUser().username), true);
          return false;
        }
      });
      $(document).bindNew('click', '.topbar .menu .login .facebook', function() {
        FB.login((function(response) {
          return app.processFBAuthResponse(response, true);
        }), {
          scope: 'email,publish_actions'
        });
        return false;
      });
      $(document).bindNew('click', '.topbar .menu .login .twitter', function() {
        window.location.href = "/auth/twitter";
        return false;
      });
      return $(document).bindNew('click', '#logout', function() {
        if (app.getUser().domain === 'fb') {
          app.logout();
          FB.logout(function(resp) {
            return app.navigate('/', true);
          });
        } else {
          app.logout();
        }
        return false;
      });
    };

    TopMenu.prototype.shortenName = function(name) {
      if ((name != null ? name.length : void 0) >= 14) {
        return name.substring(0, 12) + "..";
      } else {
        return name;
      }
    };

    return TopMenu;

  })();

  window.Poe3.apiUrl = function(url, params, options) {
    var key, paramArray, passkey, query, val;
    if (params == null) {
      params = {};
    }
    if (options == null) {
      options = {
        api: 'v1'
      };
    }
    if (/^\//.test(url)) {
      url = url.substring(1);
    }
    passkey = app.getUser().passkey;
    if (passkey) {
      params.passkey = passkey;
    }
    if (Object.keys(params).length > 0) {
      paramArray = [];
      for (key in params) {
        val = params[key];
        paramArray.push("" + key + "=" + (encodeURIComponent(val)));
      }
      query = paramArray.join('&');
      if (/\?/.test(url)) {
        url += "&" + query;
      } else {
        url += "?" + query;
      }
    }
    return "/api/" + options.api + "/" + url;
  };

  window.Poe3.fixAnchors = function(selector) {
    var a, anchors, _a, _i, _len, _results;
    anchors = $(selector).find('a');
    _results = [];
    for (_i = 0, _len = anchors.length; _i < _len; _i++) {
      _a = anchors[_i];
      a = $(_a);
      if (a.attr('fixed-anchor') !== 'true') {
        a.attr('fixed-anchor', 'true');
        _results.push(a.click(function(e) {
          var href;
          if ($(this).data('fix-anchors') !== false) {
            href = $(this).attr('href');
            if (href !== '#' && !/^http:\/\//.test(href) && !/^https:\/\//.test(href)) {
              app.navigate(href, true);
              return false;
            }
          }
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  window.Poe3.getQueryString = function(url) {
    var dict, hash, hashes, val, _i, _len;
    dict = {};
    hashes = url.slice(url.indexOf('?') + 1).split('&');
    for (_i = 0, _len = hashes.length; _i < _len; _i++) {
      val = hashes[_i];
      hash = val.split('=');
      dict[hash[0]] = decodeURIComponent(hash[1]);
    }
    return dict;
  };

  window.Poe3.formatText = function(text) {
    var item, paragraphs;
    if (text) {
      paragraphs = text.split('\n\n');
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = paragraphs.length; _i < _len; _i++) {
          item = paragraphs[_i];
          _results.push("<p>" + (item.replace(/\n/g, '<br />')) + "</p>");
        }
        return _results;
      })()).join('');
    } else {
      return '';
    }
  };

  window.Poe3.getHashCode = function(text) {
    var char, hash, i, _i, _ref;
    hash = 0;
    if (text.length === 0) {
      return hash;
    } else {
      for (i = _i = 0, _ref = text.length; _i < _ref; i = _i += 1) {
        char = text.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
      }
      return hash;
    }
  };

  window.Poe3.uniqueId = function(length) {
    var id;
    if (length == null) {
      length = 16;
    }
    id = "";
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  window.Poe3.clone = function(source) {
    var obj;
    obj = {};
    Poe3.extend(obj, source);
    return obj;
  };

  window.Poe3.extend = function(target, source) {
    var key, val, _results;
    _results = [];
    for (key in source) {
      val = source[key];
      if (typeof val !== "function") {
        _results.push(target[key] = val);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  $.fn.bindNew = function(eventName, selector, fn) {
    $(this).off(eventName, selector);
    return $(this).on(eventName, selector, fn);
  };

  $.fn._hide = function() {
    $(this).removeClass('visible');
    return $(this).addClass('hidden');
  };

  $.fn._show = function() {
    $(this).removeClass('hidden');
    return $(this).addClass('visible');
  };

}).call(this);
