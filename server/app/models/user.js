// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, User, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utils = require('../common/utils');

  BaseModel = require('./basemodel').BaseModel;

  AppError = require('../common/apperror').AppError;

  User = (function(_super) {
    __extends(User, _super);

    /*
        Fields
            - domain (string; 'fb' or 'poets')
            - domainid (string)
            - username (string)
            - domainidType (string; 'username' or 'domainid')
            - name (string)
            - location (string)
            - picture (string)
            - thumbnail (string)
            - email (string)
            - accessToken (string)
            - lastLogin (integer)
            - followers (array of summarized user)
            - following (array of summarized user)
            - about (string)
            - karma (integer)
            - facebookUsername (string)
            - twitterUsername (string)
            - website (string)
            - timestamp (integer)
    */


    User._meta = {
      type: User,
      collection: 'users',
      logging: {
        isLogged: true,
        onInsert: 'NEW_USER'
      }
    };

    User.getOrCreateUser = function(userDetails, domain, accessToken, cb) {
      return User._models.Session.get({
        accessToken: accessToken
      }, {}, function(err, session) {
        if (err) {
          return cb(err);
        } else {
          if (session == null) {
            session = new User._models.Session({
              passkey: utils.uniqueId(24),
              accessToken: accessToken
            });
          }
          return User.get({
            domain: domain,
            username: userDetails.username
          }, {}, function(err, user) {
            var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;

            if (user != null) {
              user.name = (_ref = userDetails.name) != null ? _ref : user.name;
              user.domainid = (_ref1 = userDetails.domainid) != null ? _ref1 : user.domainid;
              user.username = (_ref2 = userDetails.username) != null ? _ref2 : userDetails.domainid;
              user.domainidType = userDetails.username ? 'username' : 'domainid';
              user.location = (_ref3 = userDetails.location) != null ? _ref3 : user.location;
              user.picture = (_ref4 = userDetails.picture) != null ? _ref4 : user.picture;
              user.thumbnail = (_ref5 = userDetails.thumbnail) != null ? _ref5 : user.thumbnail;
              user.email = (_ref6 = userDetails.email) != null ? _ref6 : 'unknown@poe3.com';
              user.lastLogin = Date.now();
              return user.save({}, function(err, u) {
                if (!err) {
                  session.userid = u._id.toString();
                  session.timestamp = Date.now();
                  return session.save({}, function(err, session) {
                    if (!err) {
                      return cb(null, u, session);
                    } else {
                      return cb(err);
                    }
                  });
                } else {
                  return cb(err);
                }
              });
            } else {
              user = new User();
              user.domain = domain;
              user.domainid = userDetails.domainid;
              user.username = (_ref7 = userDetails.username) != null ? _ref7 : userDetails.domainid;
              user.domainidType = userDetails.username ? 'username' : 'domainid';
              if (domain === 'fb') {
                user.facebookUsername = userDetails.username;
              }
              if (domain === 'tw') {
                user.twitterUsername = userDetails.username;
              }
              user.name = userDetails.name;
              user.location = userDetails.location;
              user.picture = userDetails.picture;
              user.thumbnail = userDetails.thumbnail;
              user.email = (_ref8 = userDetails.email) != null ? _ref8 : 'unknown@poe3.com';
              user.lastLogin = Date.now();
              user.preferences = {
                canEmail: true
              };
              return user.save({}, function(err, u) {
                var userinfo;

                if (!err) {
                  userinfo = new User._models.UserInfo();
                  userinfo.userid = u._id.toString();
                  return userinfo.save({}, function(err, _uinfo) {
                    if (!err) {
                      session.userid = u._id.toString();
                      session.timestamp = Date.now();
                      return session.save({}, function(err, session) {
                        var loc, message, _ref10, _ref9;

                        if (!err) {
                          cb(null, u, session);
                          loc = ((_ref9 = user.location) != null ? _ref9.name : void 0) ? " from " + ((_ref10 = user.location) != null ? _ref10.name : void 0) : "";
                          message = new User._models.Message({
                            userid: '0',
                            type: "global-notification",
                            reason: 'new-user',
                            data: {
                              user: user.summarize(),
                              location: user.location
                            }
                          });
                          return message.save({}, function(err, msg) {});
                        } else {
                          return cb(err);
                        }
                      });
                    } else {
                      return cb(err);
                    }
                  });
                } else {
                  return cb(err);
                }
              });
            }
          });
        }
      });
    };

    User.getById = function(id, context, cb) {
      return User.__super__.constructor.getById.call(this, id, context, cb);
    };

    User.getByUsername = function(domain, username, context, cb) {
      return User.get({
        domain: domain,
        username: username
      }, context, function(err, user) {
        return cb(null, user);
      });
    };

    function User(params) {
      this.validate = __bind(this.validate, this);
      this.summarize = __bind(this.summarize, this);
      this.getBroadcasts = __bind(this.getBroadcasts, this);
      this.getMessageCount = __bind(this.getMessageCount, this);
      this.getMessages = __bind(this.getMessages, this);
      this.unfollow = __bind(this.unfollow, this);
      this.follow = __bind(this.follow, this);      this.followers = [];
      this.following = [];
      this.about = '';
      this.karma = 1;
      this.preferences = {};
      this.timestamp = Date.now();
      User.__super__.constructor.call(this, params);
    }

    User.prototype.follow = function(followerid, context, cb) {
      var _this = this;

      return User.getById(followerid, context, function(err, user) {
        var follower, following, matching;

        if (!err) {
          matching = (function() {
            var _i, _len, _ref, _results;

            _ref = this.followers;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              follower = _ref[_i];
              if (follower.id === followerid) {
                _results.push(follower);
              }
            }
            return _results;
          }).call(_this);
          if (!matching.length) {
            _this.followers.push(user.summarize());
          }
          matching = (function() {
            var _i, _len, _ref, _results;

            _ref = user.following;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              following = _ref[_i];
              if (following.id === this._id.toString()) {
                _results.push(following);
              }
            }
            return _results;
          }).call(_this);
          if (!matching.length) {
            user.following.push(_this.summarize());
          }
          return user.save(context, function(err, user) {
            if (!err) {
              return _this.save(context, function(err, user) {
                if (!err) {
                  return cb(err, {
                    id: followerid
                  });
                } else {
                  return cb(err);
                }
              });
            } else {
              return cb(err);
            }
          });
        } else {
          return cb(err);
        }
      });
    };

    User.prototype.unfollow = function(followerid, context, cb) {
      var _this = this;

      return User.getById(followerid, context, function(err, user) {
        var follower, following;

        if (!err) {
          _this.followers = (function() {
            var _i, _len, _ref, _results;

            _ref = this.followers;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              follower = _ref[_i];
              if (follower.id !== followerid) {
                _results.push(follower);
              }
            }
            return _results;
          }).call(_this);
          user.following = (function() {
            var _i, _len, _ref, _results;

            _ref = user.following;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              following = _ref[_i];
              if (following.id !== this._id.toString()) {
                _results.push(following);
              }
            }
            return _results;
          }).call(_this);
          return user.save(context, function(err, user) {
            if (!err) {
              return _this.save(context, function(err, user) {
                if (!err) {
                  return cb(err, {
                    id: followerid
                  });
                } else {
                  return cb(err);
                }
              });
            } else {
              return cb(err);
            }
          });
        } else {
          return cb(err);
        }
      });
    };

    User.prototype.getMessages = function(criteria, context, cb) {
      var params;

      params = {
        userid: this._id.toString()
      };
      if (criteria.since) {
        params.timestamp = {
          $gt: since
        };
      }
      return User._models.Message.find(params, (function(cursor) {
        return cursor.sort({
          _id: -1
        }).limit(100);
      }), context, cb);
    };

    User.prototype.getMessageCount = function(since, context, cb) {
      var params,
        _this = this;

      params = {
        userid: this._id.toString(),
        timestamp: {
          $gt: since
        }
      };
      return User._models.Message.getCursor(params, context, function(err, cursor) {
        return cursor.limit(100).count(cb);
      });
    };

    User.prototype.getBroadcasts = function(since, context, cb) {
      var params,
        _this = this;

      params = {
        userid: '0',
        type: 'showcase',
        timestamp: {
          $gt: since
        }
      };
      return User._models.Message.find(params, (function(cursor) {
        return cursor.sort({
          _id: -1
        }).limit(5);
      }), context, function(err, showcase) {
        params = {
          userid: '0',
          type: 'global-notification',
          timestamp: {
            $gt: since
          }
        };
        return User._models.Message.find(params, (function(cursor) {
          return cursor.sort({
            _id: -1
          }).limit(20);
        }), context, function(err, globalNotifications) {
          params = {
            userid: _this._id.toString(),
            type: 'user-notification',
            timestamp: {
              $gt: since
            }
          };
          return User._models.Message.find(params, (function(cursor) {
            return cursor.sort({
              _id: -1
            }).limit(20);
          }), context, function(err, userNotifications) {
            return cb(err, {
              showcase: showcase,
              globalNotifications: globalNotifications,
              userNotifications: userNotifications
            });
          });
        });
      });
    };

    User.prototype.summarize = function(fields) {
      var result;

      if (fields == null) {
        fields = [];
      }
      fields = fields.concat(['domain', 'username', 'name', 'picture', 'thumbnail', 'domainidType']);
      result = User.__super__.summarize.call(this, fields);
      result.id = this._id.toString();
      return result;
    };

    User.validateSummary = function(user) {
      var errors, field, required, _i, _len;

      errors = [];
      if (!user) {
        errors.push("Invalid user.");
      }
      required = ['id', 'domain', 'username', 'name', 'picture', 'thumbnail', 'domainidType'];
      for (_i = 0, _len = required.length; _i < _len; _i++) {
        field = required[_i];
        if (!user[field]) {
          errors.push("Invalid " + field);
        }
      }
      return errors;
    };

    User.prototype.validate = function() {
      var errors, user, _errors, _i, _j, _len, _len1, _ref, _ref1;

      errors = [];
      if (this.domain !== 'fb' && this.domain !== 'poets' && this.domain !== 'tw') {
        errors.push('Invalid domain.');
      }
      if (!this.domainid || !this.username) {
        errors.push('Invalid domainid.');
      }
      if (this.domainidType !== 'username' && this.domainidType !== 'domainid') {
        errors.push('Invalid domainidType.');
      }
      if (!this.name) {
        errors.push('Invalid name.');
      }
      if (!this.picture) {
        errors.push('Invalid picture.');
      }
      if (!this.thumbnail) {
        errors.push('Invalid thumbnail.');
      }
      if (!this.preferences) {
        errors.push('Invalid preferences.');
      }
      if (isNaN(this.lastLogin)) {
        errors.push('Invalid lastLogin.');
      }
      _ref = this.followers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        _errors = User.validateSummary(user);
        if (_errors.length) {
          errors.push('Invalid follower.');
          errors = errors.concat(_errors);
        }
      }
      _ref1 = this.following;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        user = _ref1[_j];
        _errors = User.validateSummary(user);
        if (_errors.length) {
          errors.push('Invalid following.');
          errors = errors.concat(_errors);
        }
      }
      if (isNaN(this.timestamp)) {
        errors.push('Invalid timestamp.');
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return User;

  }).call(this, BaseModel);

  exports.User = User;

}).call(this);
