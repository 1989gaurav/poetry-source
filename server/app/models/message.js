// Generated by CoffeeScript 1.5.0
(function() {
  var AppError, BaseModel, Message,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./basemodel').BaseModel;

  AppError = require('../common/apperror').AppError;

  Message = (function(_super) {

    __extends(Message, _super);

    /*
        Fields
            - userid (string)
            - type (string; global-notification, user-notification)
            - reason (string; new-user, new-post etc)
            - data (object, depends on reason). We don't validate this.
            - timestamp (integer)
    */


    Message._meta = {
      type: Message,
      collection: 'messages',
      logging: {
        isLogged: true,
        onInsert: 'NEW_MESSAGE'
      }
    };

    function Message(params) {
      this.validate = __bind(this.validate, this);
      this.save = __bind(this.save, this);      this.priority = 'normal';
      Message.__super__.constructor.apply(this, arguments);
    }

    Message.prototype.save = function(context, cb) {
      var _ref;
      if ((_ref = this.timestamp) == null) {
        this.timestamp = Date.now();
      }
      return Message.__super__.save.call(this, context, cb);
    };

    Message.prototype.validate = function() {
      var errors, _errors;
      errors = [];
      if (this.userid == null) {
        errors.push('Invalid userid.');
      }
      if (!this.type) {
        errors.push('Invalid type.');
      }
      if (this.type === 'user-notification') {
        _errors = Message._models.User.validateSummary(this.to);
        if (_errors.length) {
          errors.push('Invalid to.');
          errors.concat(_errors);
        }
        _errors = Message._models.User.validateSummary(this.from);
        if (_errors.length) {
          errors.push('Invalid from.');
          errors.concat(_errors);
        }
      }
      if (isNaN(this.timestamp)) {
        errors.push('Invalid timestamp.');
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return Message;

  })(BaseModel);

  exports.Message = Message;

}).call(this);
