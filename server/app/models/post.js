// Generated by CoffeeScript 1.4.0
(function() {
  var AppError, BaseModel, Post, async, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('../common/async');

  utils = require('../common/utils');

  AppError = require('../common/apperror').AppError;

  BaseModel = require('./basemodel').BaseModel;

  Post = (function(_super) {

    __extends(Post, _super);

    /*
            Fields
                - uid (integer; sequential and unique)
                - type (string; 'haiku', 'six-word-story', 'quote', 'free-verse')
                - state (string; 'open' or 'complete' or 'open-unmodifiable')
                - attachmentType (string; 'image')
                - attachment (string; for attachmentType = image this is the url)
                - attachmentThumbnail (string; url)
                - attachmentCreditsName (string)
                - attachmentCreditsWebsite (string)
                - authoringMode (string; 'collaborative' or 'solo')
                - createdBy (summarized user)
                - notes (string)
                - tags (array of string)
                - title (string; exists if type is 'free-verse')
                - coauthors (array of summarized user)
                - likes (array of summarized user)
                - likeCount (integer)
                - meta (array of string)
                - rating (integer)
                - timestamp (integer)
                - publishedAt (integer)
            }
    */


    Post._meta = {
      type: Post,
      collection: 'posts',
      concurrency: 'optimistic',
      logging: {
        isLogged: true,
        onInsert: 'NEW_POST'
      }
    };

    function Post(params) {
      this.validate = __bind(this.validate, this);

      this.summarize = __bind(this.summarize, this);

      this.validateFirstPart = __bind(this.validateFirstPart, this);

      this.shorten = __bind(this.shorten, this);

      this.getPostName = __bind(this.getPostName, this);

      this.isOwner = __bind(this.isOwner, this);

      this.countTotalWords = __bind(this.countTotalWords, this);

      this.countWords = __bind(this.countWords, this);

      this.countTotalLines = __bind(this.countTotalLines, this);

      this.countLines = __bind(this.countLines, this);

      this.sanitize = __bind(this.sanitize, this);

      this.getPostType = __bind(this.getPostType, this);

      this.unlike = __bind(this.unlike, this);

      this.like = __bind(this.like, this);

      this.publish = __bind(this.publish, this);

      this.unselectPart = __bind(this.unselectPart, this);

      this.selectPart = __bind(this.selectPart, this);

      this.addFreeVersePart = __bind(this.addFreeVersePart, this);

      this.addQuotePart = __bind(this.addQuotePart, this);

      this.addSixWordStoryPart = __bind(this.addSixWordStoryPart, this);

      this.addHaikuPart = __bind(this.addHaikuPart, this);

      this.fixPartContent = __bind(this.fixPartContent, this);

      this.addPart = __bind(this.addPart, this);

      this.destroy = __bind(this.destroy, this);

      this.unpublish = __bind(this.unpublish, this);

      this.save = __bind(this.save, this);
      this.parts = [];
      this.selectedParts = [];
      this.coauthors = [];
      this.likes = [];
      this.likeCount = 0;
      this.meta = [];
      this.tags = [];
      this.rating = 1;
      Post.__super__.constructor.apply(this, arguments);
    }

    Post.getLimit = function(limit, _default, max) {
      var result;
      result = _default;
      if (limit) {
        result = limit;
        if (result > max) {
          result = max;
        }
      }
      return result;
    };

    Post.search = function(criteria, settings, context, cb) {
      var k, limit, params, v;
      limit = this.getLimit(settings.limit, 100, 1000);
      params = {};
      for (k in criteria) {
        v = criteria[k];
        params[k] = v;
      }
      return Post.find(params, (function(cursor) {
        return cursor.sort(settings.sort).limit(limit);
      }), context, cb);
    };

    Post.prototype.save = function(context, cb) {
      var tag,
        _this = this;
      this.tags = (function() {
        var _i, _len, _ref, _results;
        _ref = this.tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push(tag.replace(/^\s+|\s+$/g, ''));
        }
        return _results;
      }).call(this);
      this.tags = (function() {
        var _i, _len, _ref, _results;
        _ref = this.tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push(tag.replace(/^#/, ''));
        }
        return _results;
      }).call(this);
      this.tags = (function() {
        var _i, _len, _ref, _results;
        _ref = this.tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          if (tag !== '') {
            _results.push(tag);
          }
        }
        return _results;
      }).call(this);
      if (!(this.type != null) || !(this.authoringMode != null) || (this.attachmentType === 'image' && !(this.attachment != null))) {
        return cb(new AppError('Post has fields missing.', 'FIELDS_MISSING_IN_POST'));
      } else {
        if (!(this._id != null)) {
          this.timestamp = Date.now();
          this.state = 'open';
          return appSettings.getNewPostUID(function(err, uid) {
            _this.uid = uid;
            if (_this.createdBy.id === context.user.id) {
              return Post.__super__.save.call(_this, context, cb);
            }
          });
        } else {
          return Post.__super__.save.call(this, context, cb);
        }
      }
    };

    Post.prototype.unpublish = function(context, cb) {
      if (this.state === 'complete') {
        if (this.type === 'haiku' || this.type === 'six-word-story' || this.type === 'quote') {
          this.state = 'open-unmodifiable';
        } else {
          this.state = 'open';
        }
        return this.save(context, cb);
      } else {
        return cb(new AppError('Post isn\'t published.', 'POST_NOT_PUBLISHED'));
      }
    };

    Post.prototype.destroy = function(context, cb) {
      var _this = this;
      Post._models.Comment.destroyAll({
        postid: this._id.toString()
      }, function() {});
      return Post.__super__.destroy.call(this, context, cb);
    };

    Post.prototype.addPart = function(part, context, cb) {
      var result;
      part.id = utils.uniqueId(24);
      part.sequence = this.selectedParts.length;
      if (this.state !== 'open') {
        return cb(new AppError('Post is not open.', "POST_NOT_OPEN"));
      } else {
        part.content = this.fixPartContent(part.content);
        if (part.content) {
          result = (function() {
            switch (this.type) {
              case 'haiku':
                return this.addHaikuPart(part, context);
              case 'six-word-story':
                return this.addSixWordStoryPart(part, context);
              case 'quote':
                return this.addQuotePart(part, context);
              case 'free-verse':
                return this.addFreeVersePart(part, context);
              default:
                return {
                  valid: false,
                  message: 'Unsupported post type.',
                  name: 'UNSUPPORTED_POST_TYPE'
                };
            }
          }).call(this);
          if (result.valid) {
            if (result.state === 'complete') {
              return this.publish(context, cb);
            } else {
              this.state = result.state;
              return this.save(context, cb);
            }
          } else {
            return cb(new AppError(result.message, result.name));
          }
        } else {
          return cb(new AppError('An empty part cannot be added.', 'PART_IS_EMPTY'));
        }
      }
    };

    Post.prototype.fixPartContent = function(content) {
      var line, lines, para, paras, validParas, _i, _len;
      content = content.replace(/[\n]{3,}/g, "\n\n");
      lines = content.split('\n');
      validParas = [];
      para = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        line = line.replace(/^\s+|\s+$/g, '');
        line = line.replace(/[ \t]{2,}/g, ' ');
        if (line) {
          para.push(line);
        }
        if (!line && para.length !== 0) {
          validParas.push(para);
          para = [];
        }
      }
      if (para.length !== 0) {
        validParas.push(para);
      }
      paras = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = validParas.length; _j < _len1; _j++) {
          para = validParas[_j];
          _results.push(para.join('\n'));
        }
        return _results;
      })();
      return paras.join('\n\n');
    };

    Post.prototype.addHaikuPart = function(part, context) {
      var state, valid;
      valid = this.authoringMode === 'collaborative' ? !this.selectedParts.length ? (this.countLines(part.content)) <= 2 : this.countTotalLines() + (this.countLines(part.content)) <= 3 : this.authoringMode === 'solo' ? this.countTotalLines() + (this.countLines(part.content)) === 3 : void 0;
      if (valid) {
        this.parts.push(part);
        if (context.user.id === this.createdBy.id) {
          this.selectedParts.push(part);
        }
        if (this.authoringMode === 'solo') {
          state = 'complete';
        } else if (this.countTotalLines() === 3) {
          state = 'open-unmodifiable';
        } else {
          state = 'open';
        }
        return {
          valid: true,
          state: state
        };
      } else {
        return {
          valid: false,
          message: "Invalid number of lines in part.",
          name: 'INVALID_LINE_COUNT'
        };
      }
    };

    Post.prototype.addSixWordStoryPart = function(part, context) {
      var state, valid;
      valid = this.authoringMode === 'collaborative' ? !this.selectedParts.length ? (this.countWords(part.content)) <= 5 : this.countTotalWords() <= 6 : this.authoringMode === 'solo' ? (this.countWords(part.content)) === 6 : void 0;
      if (valid) {
        this.parts.push(part);
        if (context.user.id === this.createdBy.id) {
          this.selectedParts.push(part);
        }
        if (this.authoringMode === 'solo') {
          state = 'complete';
        } else if (this.countTotalWords() === 6) {
          state = 'open-unmodifiable';
        } else {
          state = 'open';
        }
        return {
          valid: true,
          state: state
        };
      } else {
        return {
          valid: false,
          message: "Invalid number of words in part.",
          name: 'INVALID_WORD_COUNT'
        };
      }
    };

    Post.prototype.addQuotePart = function(part, context) {
      this.parts.push(part);
      this.selectedParts.push(part);
      return {
        valid: true,
        state: 'complete'
      };
    };

    Post.prototype.addFreeVersePart = function(part, context) {
      this.parts.push(part);
      if (context.user.id === this.createdBy.id) {
        this.selectedParts.push(part);
      }
      if (this.authoringMode === 'solo') {
        return {
          valid: true,
          state: 'complete'
        };
      } else {
        return {
          valid: true,
          state: 'open'
        };
      }
    };

    Post.prototype.selectPart = function(partid, context, cb) {
      var part, parts;
      if (this.state !== 'open') {
        return cb(new AppError('Post is not open.', "POST_NOT_OPEN"));
      } else if (context.user.id !== this.createdBy.id) {
        return cb(new AppError("Access denied.", "ACCESS_DENIED"));
      } else {
        parts = (function() {
          var _i, _len, _ref, _results;
          _ref = this.parts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            part = _ref[_i];
            if (part.id === partid) {
              _results.push(part);
            }
          }
          return _results;
        }).call(this);
        if (parts.length) {
          this.selectedParts.push(parts[0]);
          if ((this.type === 'haiku' && this.countTotalLines() === 3) || (this.type === 'six-word-story' && this.countTotalWords() === 6)) {
            this.state = 'open-unmodifiable';
          }
          return this.save(context, cb);
        } else {
          return cb(new AppError("Cannot find a part with id " + partid + ".", "CANNOT_FIND_PART"));
        }
      }
    };

    Post.prototype.unselectPart = function(partid, context, cb) {
      var lastPart;
      if (this.state === 'complete') {
        return cb(new AppError('Post is published.', "POST_IS_PUBLISHED"));
      } else if (context.user.id !== this.createdBy.id) {
        return cb(new AppError("Access denied.", "ACCESS_DENIED"));
      } else {
        if (this.selectedParts.length !== 1) {
          lastPart = this.selectedParts.slice(-1)[0];
          if (this.selectedParts.length && lastPart.id === partid) {
            if (this.state !== 'open') {
              this.state = 'open';
            }
            this.selectedParts.pop();
            return this.save(context, cb);
          } else {
            return cb(new AppError('Only the last part can be unselected.', "CAN_ONLY_UNSELECT_LAST_PART"));
          }
        } else {
          return cb(new AppError('The first part cannot be unselected.', "CANNOT_UNSELECT_FIRST_PART"));
        }
      }
    };

    Post.prototype.publish = function(context, cb) {
      var a, found, part, _i, _len, _ref;
      if (this.createdBy.id !== context.user.id) {
        return cb(new AppError('Access denied.', 'ACCESS_DENIED'));
      } else if (this.state === 'complete') {
        return cb(new AppError('Post is published.', 'POST_IS_PUBLISHED'));
      } else if (this.type === 'haiku' && this.countTotalLines() !== 3) {
        return cb(new AppError('Haiku needs to have three lines.', 'INVALID_LINE_COUNT'));
      } else if (this.type === 'six-word-story' && this.countTotalWords() !== 6) {
        return cb(new AppError('Six word story needs to have six words.', 'INVALID_WORD_COUNT'));
      } else {
        if (!this.publishedAt) {
          this.publishedAt = Date.now();
        }
        this.state = 'complete';
        _ref = this.selectedParts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          if (part.createdBy.id !== this.createdBy.id) {
            found = ((function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.coauthors;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                a = _ref1[_j];
                if (a.id === part.createdBy.id) {
                  _results.push(a);
                }
              }
              return _results;
            }).call(this)).length > 0;
            if (!found) {
              this.coauthors.push(part.createdBy);
            }
          }
        }
        return this.save(context, cb);
      }
    };

    Post.prototype.like = function(context, cb) {
      var notFound, u;
      notFound = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.likes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          u = _ref[_i];
          if (u.id === context.user.id) {
            _results.push(u);
          }
        }
        return _results;
      }).call(this)).length === 0;
      if (notFound) {
        this.likes.push(context.user);
        this.likeCount = this.likes.length;
        return this.save(context, cb);
      } else {
        return cb();
      }
    };

    Post.prototype.unlike = function(context, cb) {
      var found, u, user;
      found = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.likes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          u = _ref[_i];
          if (u.id === context.user.id) {
            _results.push(u);
          }
        }
        return _results;
      }).call(this)).length > 0;
      if (found) {
        this.likes = (function() {
          var _i, _len, _ref, _results;
          _ref = this.likes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            user = _ref[_i];
            if (user.id !== context.user.id) {
              _results.push(user);
            }
          }
          return _results;
        }).call(this);
        this.likeCount = this.likes.length;
        return this.save(context, cb);
      } else {
        return cb();
      }
    };

    Post.prototype.getPostType = function() {
      switch (this.type) {
        case 'haiku':
          return 'Haiku';
        case 'six-word-story':
          return 'Six Word Story';
        case 'quote':
          return 'Quote';
        case 'free-verse':
          return 'Free Verse';
        default:
          return 'Unknown type';
      }
    };

    Post.prototype.sanitize = function(text) {
      text = text.replace(/^\s+|\s+$/g, '');
      text = text.replace(/[ \t]{2,}/g, ' ');
      return text;
    };

    Post.prototype.countLines = function(text) {
      return text.split("\n").length;
    };

    Post.prototype.countTotalLines = function() {
      var part, sum;
      sum = function(a, b) {
        return a + b;
      };
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.selectedParts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          _results.push(this.countLines(part.content));
        }
        return _results;
      }).call(this)).reduce(sum, 0);
    };

    Post.prototype.countWords = function(text) {
      return text.split(" ").length;
    };

    Post.prototype.countTotalWords = function() {
      var part, sum;
      sum = function(a, b) {
        return a + b;
      };
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.selectedParts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          _results.push(this.countWords(part.content));
        }
        return _results;
      }).call(this)).reduce(sum, 0);
    };

    Post.prototype.isOwner = function(userid) {
      return this.createdBy.id === userid;
    };

    Post.prototype.getPostName = function(maxLength, prefixType) {
      var part, text, type, _ref;
      switch (this.type) {
        case 'haiku':
          type = prefixType ? 'Haiku ' : '';
          return "" + type + (this.shorten(this.selectedParts[0].content, maxLength));
        case 'six-word-story':
          type = prefixType ? 'Six Word Story ' : '';
          text = ((function() {
            var _i, _len, _ref, _results;
            _ref = this.selectedParts;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              part = _ref[_i];
              _results.push(part.content);
            }
            return _results;
          }).call(this)).join(' ');
          return "" + type + (this.shorten(text, maxLength));
        case 'quote':
          type = prefixType ? 'Quote ' : '';
          return "" + type + (this.shorten(this.selectedParts[0].content, maxLength));
        case 'free-verse':
          type = prefixType ? 'Free Verse ' : '';
          return "" + type + (this.shorten((_ref = this.title) != null ? _ref : this.selectedParts[0].content, maxLength));
      }
    };

    Post.prototype.shorten = function(text, length) {
      var lines;
      lines = text.split('\n');
      if (length && lines[0].length > length) {
        return lines[0].substring(0, length) + "...";
      } else {
        return lines[0];
      }
    };

    Post.prototype.validateFirstPart = function(part) {
      var content;
      content = this.sanitize(part.content);
      if (!content) {
        return {
          isValid: false,
          message: "You haven't written anything.",
          name: "PART_IS_EMPTY"
        };
      } else {
        if (this.authoringMode === 'solo') {
          if (this.type === 'haiku') {
            if (this.countLines(content) !== 3) {
              return {
                isValid: false,
                message: "A Haiku needs three lines.",
                name: 'INVALID_LINE_COUNT'
              };
            }
          } else if (this.type === 'six-word-story') {
            if (this.countWords(content) !== 6) {
              return {
                isValid: false,
                message: "A Six Word Story needs six words.",
                name: 'INVALID_WORD_COUNT'
              };
            }
          }
        } else if (this.authoringMode === 'collaborative') {
          if (this.type === 'haiku') {
            if (this.countLines(content) >= 3) {
              return {
                isValid: false,
                message: 'In a collaborative Haiku, you cannot write more than two lines.',
                name: 'INVALID_LINE_COUNT'
              };
            }
          } else if (this.type === 'six-word-story') {
            if (this.countWords(content) >= 6) {
              return {
                isValid: false,
                message: 'In a collaborative Six Word Story, you cannot write more than five words.',
                name: 'INVALID_WORD_COUNT'
              };
            }
          }
        }
        return {
          isValid: true
        };
      }
    };

    Post.prototype.summarize = function(fields) {
      var result;
      if (fields == null) {
        fields = [];
      }
      fields = fields.concat(['type', 'authoringMode', 'uid', 'timestamp', 'createdBy', 'coauthors', 'selectedParts', 'publishedAt', 'state', 'tags', 'attachmentType', 'attachment', 'attachmentThumbnail']);
      result = Post.__super__.summarize.call(this, fields);
      result.id = this._id.toString();
      return result;
    };

    Post.prototype.validate = function() {
      var errors, user, _errors, _i, _j, _len, _len1, _ref, _ref1;
      errors = [];
      if (isNaN(this.uid)) {
        errors.push('Invalid uid.');
      }
      if (this.type !== 'haiku' && this.type !== 'six-word-story' && this.type !== 'quote' && this.type !== 'free-verse') {
        errors.push('Invalid type.');
      }
      if (this.type === 'haiku' && this.countTotalLines() > 3) {
        errors.push('A haiku can have up to 3 lines.');
      }
      if (this.type === 'six-word-story' && this.countTotalWords() > 6) {
        errors.push('A Six Word Story can have up to 6 words.');
      }
      if (this.state !== 'open' && this.state !== 'complete' && this.state !== 'open-unmodifiable') {
        errors.push('Invalid state.');
      }
      if (this.state === 'open') {
        if ((this.type === 'six-word-story' && this.countTotalWords() === 6) || (this.type === 'haiku' && this.countTotalLines() === 3)) {
          errors.push('Open post cannot be content-complete.');
        }
      }
      if (this.state === 'open-unmodifiable') {
        if (this.type === 'free-verse') {
          errors.push('Free verse cannot be in complete state.');
        }
        if ((this.type === 'six-word-story' && this.countTotalWords() !== 6) || (this.type === 'haiku' && this.countTotalLines() !== 3)) {
          errors.push('Unmodifiable post must be content-complete.');
        }
      }
      if (this.state === 'complete') {
        if ((this.type === 'six-word-story' && this.countTotalWords() !== 6) || (this.type === 'haiku' && this.countTotalLines() !== 3)) {
          errors.push('Completed post must be content complete.');
        }
      }
      if (this.attachmentType) {
        if (this.attachmentType !== 'image') {
          errors.push('Invalid attachmentType.');
        }
        if (this.attachmentType === 'image') {
          if (!this.attachment) {
            errors.push('Invalid attachment.');
          }
          if (!this.attachmentThumbnail) {
            errors.push('Invalid attachmentThumbnail.');
          }
        }
      }
      if (this.authoringMode !== 'collaborative' && this.authoringMode !== 'solo') {
        errors.push('Invalid authoringMode.');
      }
      _errors = Post._models.User.validateSummary(this.createdBy);
      if (_errors.length) {
        errors.push('Invalid createdBy.');
        errors = errors.concat(_errors);
      }
      _ref = this.coauthors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        _errors = Post._models.User.validateSummary(user);
        if (_errors.length) {
          errors.push('Invalid coauthor.');
          errors = errors.concat(_errors);
        }
      }
      _ref1 = this.likes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        user = _ref1[_j];
        _errors = Post._models.User.validateSummary(user);
        if (_errors.length) {
          errors.push('Invalid like.');
          errors = errors.concat(_errors);
        }
      }
      if (isNaN(this.timestamp)) {
        errors.push('Invalid timestamp.');
      }
      if (this.publishedAt) {
        if (isNaN(this.publishedAt)) {
          errors.push('Invalid publishedAt.');
        }
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return Post;

  })(BaseModel);

  exports.Post = Post;

}).call(this);
