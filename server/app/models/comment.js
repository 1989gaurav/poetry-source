// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, Comment, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./basemodel').BaseModel;

  AppError = require('../common/apperror').AppError;

  Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment() {
      this.validate = __bind(this.validate, this);
      this.save = __bind(this.save, this);      _ref = Comment.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
        Fields
        - postid (string)
        - content (string)
        - createdBy (summarized user)
        - timestamp (integer)
    */


    Comment._meta = {
      type: Comment,
      collection: 'comments',
      logging: {
        isLogged: true,
        onInsert: 'NEW_COMMENT'
      },
      validateMultiRecordOperationParams: function(params) {
        return params.postid;
      }
    };

    Comment.prototype.save = function(context, cb) {
      this.timestamp = Date.now();
      return Comment.__super__.save.call(this, context, cb);
    };

    Comment.prototype.validate = function() {
      var errors, _errors;

      errors = [];
      if (!this.postid) {
        errors.push('Missing postid.');
      }
      if (!this.content) {
        errors.push('Missing content.');
      }
      _errors = Comment._models.User.validateSummary(this.createdBy);
      if (_errors.length) {
        errors.push('Invalid createdBy.');
        errors = errors.concat(_errors);
      }
      if (isNaN(this.timestamp)) {
        errors.push('Invalid timestamp.');
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return Comment;

  })(BaseModel);

  exports.Comment = Comment;

}).call(this);
