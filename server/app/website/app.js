// Generated by CoffeeScript 1.5.0
(function() {
  var ApplicationCache, app, conf, controllers, database, domain, express, findHandler, host, models, port, utils, validator, _fn, _i, _len, _ref,
    _this = this;

  console.log("Poe3 content server started at " + (new Date));

  console.log("NODE_ENV is " + process.env.NODE_ENV);

  console.log('---------------------');

  express = require('express');

  conf = require('../conf');

  models = new (require('../models')).Models(conf.db);

  database = new (require('../common/database')).Database(conf.db);

  controllers = require('./controllers');

  utils = require('../common/utils');

  ApplicationCache = require('../common/cache').ApplicationCache;

  validator = require('validator');

  app = express();

  app.set("view engine", "hbs");

  app.set('view options', {
    layout: 'layouts/default'
  });

  app.use(express.cookieParser());

  app.use(function(req, res, next) {
    var file, inputs, key, val, _i, _j, _len, _len1, _ref, _ref1;
    _ref = [req.params, req.query, req.body];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      inputs = _ref[_i];
      if (inputs) {
        for (key in inputs) {
          val = inputs[key];
          val = inputs[key];
          val = val.replace('<', '(');
          val = val.replace('>', ')');
          inputs[key] = validator.sanitize(val).xss();
        }
      }
      if (req.files) {
        _ref1 = req.files;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          file = _ref1[_j];
          val = req.files[file];
          val.name = val.name.replace('<', '');
          val.name = val.name.replace('>', '');
          val.name = val.name.replace('"', '');
          val.name = validator.sanitize(val).xss();
        }
      }
    }
    return next();
  });

  findHandler = function(name, getHandler) {
    return function(req, res, next) {
      var controller;
      controller = (function() {
        switch (name.toLowerCase()) {
          case 'home':
            return new controllers.HomeController();
          case 'users':
            return new controllers.UsersController();
          case 'auth':
            return new controllers.AuthController();
          default:
            throw new Error("Cannot find controller.");
        }
      })();
      return getHandler(controller)(req, res, next);
    };
  };

  app.get('/', findHandler('home', function(c) {
    return c.index;
  }));

  app.get('/:uid', findHandler('home', function(c) {
    return c.showPost;
  }));

  _ref = ['fb', 'tw', 'poets'];
  _fn = function(domain) {
    return app.get("/" + domain + "/:username", function(req, res, next) {
      req.params.domain = domain;
      return findHandler('users', function(c) {
        return c.showUser;
      })(req, res, next);
    });
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    domain = _ref[_i];
    _fn(domain);
  }

  app.get('/auth/twitter', findHandler('auth', function(c) {
    return c.twitter;
  }));

  app.get('/auth/twitter/callback', findHandler('auth', function(c) {
    return c.twitterCallback;
  }));

  app.use(app.router);

  app.use(function(err, req, res, next) {
    console.log(err);
    return res.send(500, 'Something broke.');
  });

  app.use(function(req, res, next) {
    return res.render('index.hbs', {
      title: 'Write Poetry. Together.'
    });
  });

  host = process.argv[2];

  port = process.argv[3];

  app.listen(port, host != null ? host : '');

}).call(this);
