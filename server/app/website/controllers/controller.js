// Generated by CoffeeScript 1.4.0
(function() {
  var AppError, Controller,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AppError = require('../../common/apperror').AppError;

  Controller = (function() {

    function Controller() {
      this.setValues = __bind(this.setValues, this);

      this.getValue = __bind(this.getValue, this);

    }

    Controller.prototype.getValue = function(src, field, safe) {
      if (safe == null) {
        safe = true;
      }
      return src[field];
    };

    Controller.prototype.handleError = function(onError) {
      return function(fn) {
        return function() {
          if (arguments[0]) {
            return onError(arguments[0]);
          } else {
            return fn.apply(void 0, arguments);
          }
        };
      };
    };

    Controller.prototype.setValues = function(target, src, fields, options) {
      var field, fsrc, ft, setValue, _i, _len, _results, _results1,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (!(options.safe != null)) {
        options.safe = true;
      }
      if (!options.ignoreEmpty) {
        options.ignoreEmpty = true;
      }
      setValue = function(src, targetField, srcField) {
        var val;
        val = _this.getValue(src, srcField, options.safe);
        if (options.ignoreEmpty) {
          if (val != null) {
            return target[field] = val;
          }
        } else {
          return target[field] = val;
        }
      };
      if (fields.constructor === Array) {
        _results = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          field = fields[_i];
          _results.push(setValue(src, field, field));
        }
        return _results;
      } else {
        _results1 = [];
        for (ft in fields) {
          fsrc = fields[ft];
          _results1.push(setValue(src, ft, fsrc));
        }
        return _results1;
      }
    };

    return Controller;

  })();

  exports.Controller = Controller;

}).call(this);
