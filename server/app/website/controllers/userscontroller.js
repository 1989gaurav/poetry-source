// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, UsersController, conf, controller, https, models, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  https = require('https');

  conf = require('../../conf');

  models = new (require('../../models')).Models(conf.db);

  controller = require('./controller');

  AppError = require('../../common/apperror').AppError;

  UsersController = (function(_super) {
    __extends(UsersController, _super);

    function UsersController() {
      this.showUser = __bind(this.showUser, this);      _ref = UsersController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UsersController.prototype.showUser = function(req, res, next) {
      var _this = this;

      return models.User.get({
        domain: req.params.domain,
        username: req.params.username
      }, {}, function(err, user) {
        var params, settings, title;

        if (user) {
          title = user.name;
          params = {};
          params.$or = [
            {
              'createdBy.domain': user.domain,
              'createdBy.username': user.username
            }, {
              'coauthors.domain': user.domain,
              'coauthors.username': user.username
            }
          ];
          params.state = "complete";
          settings = {
            sort: {
              uid: -1
            }
          };
          return models.Post.search(params, settings, {
            user: req.user
          }, function(err, posts) {
            var coauthor, post, _i, _j, _len, _len1, _ref1;

            for (_i = 0, _len = posts.length; _i < _len; _i++) {
              post = posts[_i];
              post.authors = [post.createdBy];
              _ref1 = post.coauthors;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                coauthor = _ref1[_j];
                post.authors.push(coauthor);
              }
            }
            return res.render('users/showuser.hbs', {
              title: title,
              user: user,
              posts: posts
            });
          });
        } else {
          return res.render('index.hbs', {
            title: 'Write Poetry. Together.'
          });
        }
      });
    };

    return UsersController;

  })(controller.Controller);

  exports.UsersController = UsersController;

}).call(this);
