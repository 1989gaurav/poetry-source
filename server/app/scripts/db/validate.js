// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, async, conf, hasErrors, info, models, sys, tasks, typeInfoList, utils, _fn, _i, _len;

  async = require('../../common/async');

  utils = require('../../common/utils');

  conf = require('../../conf');

  models = new (require('../../models')).Models(conf.db);

  AppError = require('../../common/apperror').AppError;

  sys = require('sys');

  tasks = [];

  typeInfoList = [
    {
      type: models.Session,
      id: function(x) {
        return x._id;
      }
    }, {
      type: models.User,
      id: function(x) {
        return "" + x.domain + "/" + x.username;
      }
    }, {
      type: models.UserInfo,
      id: function(x) {
        return x._id;
      }
    }, {
      type: models.Post,
      id: function(x) {
        return x._id;
      }
    }, {
      type: models.Comment,
      id: function(x) {
        return x._id;
      }
    }, {
      type: models.Message,
      id: function(x) {
        return x._id;
      }
    }
  ];

  hasErrors = false;

  _fn = function(info) {
    return tasks.push(function(cb) {
      var _this = this;

      return info.type.getAll({}, {}, function(err, items) {
        var error, item, result, _j, _k, _len1, _len2, _ref;

        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          result = item.validate();
          if (!result.isValid) {
            hasErrors = true;
            console.log("" + info.type._meta.collection + "(" + (info.id(item)) + ") has errors.");
            _ref = result.errors;
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              error = _ref[_k];
              console.log("" + error);
            }
            console.log("\n");
          }
        }
        return cb();
      });
    });
  };
  for (_i = 0, _len = typeInfoList.length; _i < _len; _i++) {
    info = typeInfoList[_i];
    _fn(info);
  }

  async.series(tasks, function() {
    if (hasErrors) {
      console.log("There are errors.");
    }
    console.log('Validation complete.');
    return process.exit();
  });

}).call(this);
