// Generated by CoffeeScript 1.5.0
(function() {
  var AppError, UsersController, conf, controller, fs, models,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  controller = require('./controller');

  conf = require('../../conf');

  models = new (require('../../models')).Models(conf.db);

  fs = require('fs');

  AppError = require('../../common/apperror').AppError;

  UsersController = (function(_super) {

    __extends(UsersController, _super);

    function UsersController() {
      this.getBroadcasts = __bind(this.getBroadcasts, this);
      this.syncStatus = __bind(this.syncStatus, this);
      this.getMessages = __bind(this.getMessages, this);
      this.unfollow = __bind(this.unfollow, this);
      this.follow = __bind(this.follow, this);
      this.updateUser = __bind(this.updateUser, this);
      this.getUsers = __bind(this.getUsers, this);
      UsersController.__super__.constructor.apply(this, arguments);
    }

    UsersController.prototype.getUsers = function(req, res, next) {
      var _this = this;
      return this.attachUser(arguments, function() {
        if ((req.query.username != null) && (req.query.domain != null)) {
          return models.User.getByUsername(req.query.domain, req.query.username, {
            user: req.user
          }, function(err, user) {
            if (user) {
              return res.send(user.summarize(['about', 'facebookUsername', 'twitterUsername', 'website', 'followers', 'following']));
            } else {
              return next(new AppError('No such user.', 'USER_DOES_NOT_EXIST'));
            }
          });
        } else {
          return next(new AppError('Invalid query.', 'INVALID_QUERY'));
        }
      });
    };

    UsersController.prototype.updateUser = function(req, res, next) {
      var _this = this;
      return this.ensureSession(arguments, function() {
        if (req.user.id === req.params.id) {
          return models.User.getById(req.user.id, {
            user: req.user
          }, function(err, user) {
            if (!err) {
              user.about = req.body.about;
              user.twitterUsername = req.body.twitterUsername;
              user.website = req.body.website;
              if (req.body.showFBUrl === "true") {
                user.showFBUrl = req.body.showFBUrl;
              }
              return user.save({
                user: req.user
              }, function(err, user) {
                if (!err) {
                  return res.send(user.summarize(['about', 'twitterUsername', 'website']));
                } else {
                  return next(err);
                }
              });
            } else {
              return next(err);
            }
          });
        } else {
          return next(new AppError('Access denied.', 'ACCESS_DENIED'));
        }
      });
    };

    UsersController.prototype.follow = function(req, res, next) {
      var _this = this;
      return this.ensureSession(arguments, function() {
        return models.User.getById(req.params.id, {
          user: req.user
        }, function(err, user) {
          if (!err) {
            return user.follow(req.user.id, {
              user: req.user
            }, function(err, follower) {
              var message;
              if (!err) {
                res.send(follower);
                message = new models.Message({
                  userid: req.params.id,
                  type: 'user-notification',
                  reason: 'new-follower',
                  to: user.summarize(),
                  from: req.user,
                  data: {}
                });
                return message.save({}, function() {});
              } else {
                return next(err);
              }
            });
          } else {
            return next(err);
          }
        });
      });
    };

    UsersController.prototype.unfollow = function(req, res, next) {
      var _this = this;
      return this.ensureSession(arguments, function() {
        return models.User.getById(req.params.id, {
          user: req.user
        }, function(err, user) {
          if (!err) {
            return user.unfollow(req.user.id, {
              user: req.user
            }, function(err, follower) {
              if (!err) {
                return res.send(follower);
              } else {
                return next(err);
              }
            });
          } else {
            return next(err);
          }
        });
      });
    };

    UsersController.prototype.getMessages = function(req, res, next) {
      var _this = this;
      return this.ensureSession(arguments, function() {
        if (req.user.id === req.params.id) {
          return models.User.getById(req.user.id, {
            user: req.user
          }, function(err, user) {
            var criteria;
            if (!err) {
              criteria = {};
              if (req.query.since) {
                criteria.since = parseInt(req.query.since);
              }
              return user.getMessages(criteria, {
                user: req.user
              }, function(err, messages) {
                models.UserInfo.get({
                  userid: req.user.id
                }, {
                  user: req.user
                }, function(err, userinfo) {
                  if (!err) {
                    userinfo.lastAccessMessageTime = Date.now();
                    return userinfo.save({
                      user: req.user
                    }, function() {});
                  }
                });
                return res.send(messages);
              });
            } else {
              return next(err);
            }
          });
        } else {
          return next(new AppError('Access denied.', 'ACCESS_DENIED'));
        }
      });
    };

    UsersController.prototype.syncStatus = function(req, res, next) {
      var lastSyncTime, _handleError,
        _this = this;
      _handleError = this.handleError(next);
      lastSyncTime = Date.now();
      return this.ensureSession(arguments, function() {
        if (req.user.id === req.params.id) {
          return models.User.getById(req.user.id, {
            user: req.user
          }, _handleError(function(err, user) {
            return models.UserInfo.get({
              userid: req.user.id
            }, {
              user: req.user
            }, _handleError(function(err, userinfo) {
              var lastAccessMessageTime, _ref;
              lastAccessMessageTime = (_ref = userinfo.lastAccessMessageTime) != null ? _ref : 0;
              return user.getMessageCount(lastAccessMessageTime, {
                user: req.user
              }, _handleError(function(err, count) {
                return user.getBroadcasts(parseInt(req.query.since), {
                  user: req.user
                }, _handleError(function(err, broadcasts) {
                  return res.send({
                    userid: req.user.id,
                    broadcasts: broadcasts,
                    messageCount: count,
                    lastSyncTime: lastSyncTime
                  });
                }));
              }));
            }));
          }));
        } else {
          return next(new AppError('Access denied.', 'ACCESS_DENIED'));
        }
      });
    };

    UsersController.prototype.getBroadcasts = function(req, res, next) {
      var lastSyncTime, params, since,
        _this = this;
      since = parseInt(req.query.since);
      lastSyncTime = Date.now();
      params = {
        userid: '0',
        type: 'showcase',
        timestamp: {
          $gt: since
        }
      };
      return models.Message.find(params, (function(cursor) {
        return cursor.sort({
          _id: -1
        }).limit(5);
      }), {}, function(err, showcase) {
        params = {
          userid: '0',
          type: 'global-notification',
          timestamp: {
            $gt: since
          }
        };
        return models.Message.find(params, (function(cursor) {
          return cursor.sort({
            _id: -1
          }).limit(20);
        }), {}, function(err, globalNotifications) {
          return res.send({
            broadcasts: {
              showcase: showcase,
              globalNotifications: globalNotifications
            },
            lastSyncTime: lastSyncTime
          });
        });
      });
    };

    return UsersController;

  })(controller.Controller);

  exports.UsersController = UsersController;

}).call(this);
