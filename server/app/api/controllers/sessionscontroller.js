// Generated by CoffeeScript 1.5.0
(function() {
  var AppError, FaceBookClient, SessionsController, conf, controller, models, querystring, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  controller = require('./controller');

  conf = require('../../conf');

  models = new (require('../../models')).Models(conf.db);

  querystring = require('querystring');

  utils = require('../../common/utils');

  FaceBookClient = require('../../common/facebookclient').FaceBookClient;

  AppError = require('../../common/apperror').AppError;

  SessionsController = (function(_super) {

    __extends(SessionsController, _super);

    function SessionsController() {
      this.parseFBUserDetails = __bind(this.parseFBUserDetails, this);
      this.createSession = __bind(this.createSession, this);
      SessionsController.__super__.constructor.apply(this, arguments);
    }

    SessionsController.prototype.createSession = function(req, res, next) {
      var accessToken, client, options,
        _this = this;
      if (req.body.domain === 'fb') {
        client = new FaceBookClient();
        options = {
          path: '/me?' + querystring.stringify({
            fields: 'id,username,name,first_name,last_name,location,email',
            access_token: req.body.accessToken,
            client_id: conf.auth.facebook.FACEBOOK_APP_ID,
            client_secret: conf.auth.facebook.FACEBOOK_SECRET
          })
        };
        return client.secureGraphRequest(options, function(err, userDetails) {
          var _userDetails;
          _userDetails = _this.parseFBUserDetails(JSON.parse(userDetails));
          if (_userDetails.domainid && _userDetails.name) {
            return models.User.getOrCreateUser(_userDetails, 'fb', req.body.accessToken, function(err, user, session) {
              if (!err) {
                res.contentType('json');
                return res.send({
                  userid: user._id,
                  domain: 'fb',
                  username: user.username,
                  name: user.name,
                  passkey: session.passkey
                });
              } else {
                return next(err);
              }
            });
          } else {
            return next(new AppError('Invalid credentials', 'INVALID_CREDENTIALS'));
          }
        });
      } else if (req.body.domain === 'poets') {
        if (req.body.secret === conf.auth.adminkeys["default"]) {
          accessToken = utils.uniqueId(24);
          return models.User.getOrCreateUser(req.body, 'poets', accessToken, function(err, user, session) {
            if (!err) {
              res.contentType('json');
              return res.send({
                userid: user._id,
                domain: 'poets',
                username: user.username,
                domainidType: user.domainidType,
                name: user.name,
                passkey: session.passkey
              });
            } else {
              return next(err);
            }
          });
        } else {
          return next(new AppError('Access denied', 'ACCESS_DENIED'));
        }
      }
    };

    SessionsController.prototype.parseFBUserDetails = function(userDetails) {
      var _ref;
      return {
        domainid: userDetails.id,
        username: (_ref = userDetails.username) != null ? _ref : userDetails.id,
        name: userDetails.name,
        location: userDetails.location,
        email: userDetails.email,
        picture: "http://graph.facebook.com/" + userDetails.id + "/picture?type=large",
        thumbnail: "http://graph.facebook.com/" + userDetails.id + "/picture"
      };
    };

    return SessionsController;

  })(controller.Controller);

  exports.SessionsController = SessionsController;

}).call(this);
