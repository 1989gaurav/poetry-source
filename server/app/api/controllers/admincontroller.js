// Generated by CoffeeScript 1.4.0
(function() {
  var AdminController, AppError, conf, controller, fs, models, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  controller = require('./controller');

  conf = require('../../conf');

  models = new (require('../../models')).Models(conf.db);

  fs = require('fs');

  utils = require('../../common/utils');

  AppError = require('../../common/apperror').AppError;

  AdminController = (function(_super) {

    __extends(AdminController, _super);

    function AdminController() {
      this.deleteMessage = __bind(this.deleteMessage, this);

      this.addMessage = __bind(this.addMessage, this);

      this.impersonate = __bind(this.impersonate, this);

      this.deleteMeta = __bind(this.deleteMeta, this);

      this.addMeta = __bind(this.addMeta, this);

      this.ensureAdmin = __bind(this.ensureAdmin, this);
      return AdminController.__super__.constructor.apply(this, arguments);
    }

    AdminController.prototype.ensureAdmin = function(args, fn) {
      var next, req, res,
        _this = this;
      req = args[0], res = args[1], next = args[2];
      return this.getUserWithPasskey(req.query.passkey, function(err, user) {
        var _ref, _ref1;
        if ((user != null ? user.username : void 0) === 'jeswin' && user.domain === 'fb') {
          req.user = user;
          return fn();
        } else {
          console.log("" + ((_ref = _this.user) != null ? _ref.username : void 0) + "@" + ((_ref1 = _this.user) != null ? _ref1.domain : void 0));
          return next(new AppError("Well, you don't look much of an admin to me.", 'NOT_ADMIN'));
        }
      });
    };

    AdminController.prototype.addMeta = function(req, res, next) {
      var _this = this;
      return this.ensureAdmin(arguments, function() {
        return models.Post.get({
          uid: parseInt(req.query.uid)
        }, {
          user: req.user
        }, function(err, post) {
          if (req.query.meta) {
            if (post.meta.indexOf(req.query.meta) === -1) {
              post.meta.push(req.query.meta);
              return post.save({}, function() {
                return res.send(post);
              });
            } else {
              return res.send("" + req.query.meta + " exists in meta.");
            }
          } else {
            return res.send("Missing meta.");
          }
        });
      });
    };

    AdminController.prototype.deleteMeta = function(req, res, next) {
      var _this = this;
      return this.ensureAdmin(arguments, function() {
        if (req.query.meta) {
          return models.Post.get({
            uid: parseInt(req.query.uid)
          }, {
            user: req.user
          }, function(err, post) {
            var i;
            post.meta = (function() {
              var _i, _len, _ref, _results;
              _ref = post.meta;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                i = _ref[_i];
                if (i !== req.query.meta) {
                  _results.push(i);
                }
              }
              return _results;
            })();
            return post.save({}, function() {
              return res.send(post);
            });
          });
        } else {
          return res.send("Missing meta.");
        }
      });
    };

    AdminController.prototype.impersonate = function(req, res, next) {
      var _this = this;
      return this.ensureAdmin(arguments, function() {
        return models.User.get({
          domain: req.query.domain,
          username: req.query.username
        }, {}, function(err, user) {
          if (user && !err) {
            return models.Session.find({
              userid: user._id.toString()
            }, (function(cursor) {
              return cursor.sort({
                timestamp: -1
              }).limit(1);
            }), {
              user: req.user
            }, function(err, sessions) {
              var session;
              session = sessions[0];
              if (!err) {
                return res.send({
                  userid: user._id,
                  domain: user.domain,
                  username: user.username,
                  name: user.name,
                  passkey: session.passkey
                });
              }
            });
          }
        });
      });
    };

    AdminController.prototype.addMessage = function(req, res, next) {
      var _this = this;
      return this.ensureAdmin(arguments, function() {
        var msg;
        msg = new models.Message();
        msg.userid = '0';
        msg.type = req.body.type;
        msg.reason = req.body.reason;
        msg.data = req.body.data;
        msg.data = msg.data.replace(/\_\(/g, '<');
        msg.data = msg.data.replace(/\)\_/g, '>');
        msg.data = msg.data.replace(/js\:/g, 'javascript:');
        msg.timestamp = parseInt(req.body.timestamp);
        return msg.save({}, function(err, msg) {
          if (!err) {
            return res.send(msg);
          } else {
            return res.send("Error adding message.");
          }
        });
      });
    };

    AdminController.prototype.deleteMessage = function(req, res, next) {
      var _this = this;
      return this.ensureAdmin(arguments, function() {
        return models.Message.getById(req.query.id, {}, function(err, message) {
          if (!err) {
            return message.destroy({}, function(err) {
              if (!err) {
                return res.send("Deleted");
              } else {
                return next(err);
              }
            });
          } else {
            return next(err);
          }
        });
      });
    };

    return AdminController;

  })(controller.Controller);

  exports.AdminController = AdminController;

}).call(this);
